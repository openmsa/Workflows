<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-02 at 13:47:50.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/pnf.php';

class pnfTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var pnf
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers pnf::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=license&type=1&device_type=1';
        $_GET['function_type']    = 'pnf';
        $_GET['scenario']         = 'resource';
        $_GET['type']             = '1';
        $_GET['device_type']      = '1';
        $_GET['redundant_configuration_flg']      = '1';

        $ret = new pnf();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $result = array(
          'total_info' => array(
            'contract_cnt' => '1'
          ),
          'contract_info' => array(
            'node_id' => '1234'
          )
        );

        //case 1
        $stb = $this->getMock('pnf',array('_execMultiApi', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue($result));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb), '');

        // case 1
        $_GET['type']             = '1';
        $_GET['device_type']      = '3';

        $ret = new pnf();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        //case 2
        $stb = $this->getMock('pnf',array('_execMultiApi', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue($result));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb), '');


    }

    /**
     * @covers pnf::_getContInfo
     * @todo   Implement testgetContInfo().
     */
    public function testgetContInfo(){
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=license&type=1&device_type=1';
        $_GET['function_type']    = 'pnf';
        $_GET['scenario']         = 'resource';
        $_GET['type']             = '1';
        $_GET['device_type']      = '1';
        $_GET['redundant_configuration_flg']      = '1';

        $ret = new pnf();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $aplInfo['apl_info'][0]['node_id'] = '1234';
        $aplInfo['apl_info'][0]['device_user_name'] = 'test';
        $aplInfo['apl_info'][0]['tenant_name'] = 'tenant_name123';
        $aplInfo['apl_info'][0]['IaaS_tenant_id'] = '1234';
        $aplInfo['apl_info'][0]['device_name_master'] = 'paloalto';
        $aplInfo['apl_info'][0]['ID'] = 11;
        $aplInfo['apl_info'][0]['task_status'] = '1';

        $result = array(
          'total_info' => array(
            'quota' => '5',
            'contract_cnt' => '3',
            'use_cnt' => '4',
            'unavailable_cnt' => '5',
          ),
          'contract_info' => array(
            '0' => array(
              'node_id' => '1234',
              'device_user_name' => 'test',
              'tenant_name' => 'tenant_name123',
              'IaaS_tenant_id' => '1234',
              'device_name_master' => 'paloalto',
              'ID' => 11,
              'task_status' => '1',
              'use_status' => '1',
            )
          )
        );

        //case 1
        $stb = $this->getMock('pnf',array( '_getQuotaPnf', '_getContractCntPnf', '_getUseCntPnf', '_getUnavailableCntPnf', 'success'));
        $stb->expects($this->any())->method('_getQuotaPnf')->will($this->returnValue(5));
        $stb->expects($this->any())->method('_getContractCntPnf')->will($this->returnValue(3));
        $stb->expects($this->any())->method('_getUseCntPnf')->will($this->returnValue(4));
        $stb->expects($this->any())->method('_getUnavailableCntPnf')->will($this->returnValue(5));
        $this->assertEquals( $method->invoke($stb, $aplInfo),$result);

        $ret = new pnf();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $aplInfo['apl_info'][0]['node_id'] = '';
        $aplInfo['apl_info'][0]['device_user_name'] = '';
        $aplInfo['apl_info'][0]['tenant_name'] = '';
        $aplInfo['apl_info'][0]['IaaS_tenant_id'] = '';
        $aplInfo['apl_info'][0]['device_name_master'] = 'paloalto';
        $aplInfo['apl_info'][0]['ID'] = 11;
        $aplInfo['apl_info'][0]['task_status'] = '1';

        $result = array(
          'total_info' => array(
            'quota' => '5',
            'contract_cnt' => '3',
            'use_cnt' => '4',
            'unavailable_cnt' => '5',
          ),
          'contract_info' => array(
            '0' => array(
              'node_id' => '',
              'device_user_name' => '',
              'tenant_name' => '',
              'IaaS_tenant_id' => '',
              'device_name_master' => 'paloalto',
              'ID' => 11,
              'task_status' => '1',
              'use_status' => '0',
            )
          )
        );

        //case 2
        $stb = $this->getMock('pnf',array( '_getQuotaPnf', '_getContractCntPnf', '_getUseCntPnf', '_getUnavailableCntPnf', 'success'));
        $stb->expects($this->any())->method('_getQuotaPnf')->will($this->returnValue(5));
        $stb->expects($this->any())->method('_getContractCntPnf')->will($this->returnValue(3));
        $stb->expects($this->any())->method('_getUseCntPnf')->will($this->returnValue(4));
        $stb->expects($this->any())->method('_getUnavailableCntPnf')->will($this->returnValue(5));
        $this->assertEquals( $method->invoke($stb, $aplInfo),$result);

    }

}
