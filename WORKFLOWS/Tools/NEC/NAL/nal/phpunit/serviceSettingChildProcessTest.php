<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-12 at 15:19:56.
 */

require_once dirname(__FILE__) . '/Stub/serviceSettingChildProcessStb.php';
require_once dirname(__FILE__) . '/../Nal/bin/app/serviceSettingChildProcess.php';

class serviceSettingChildProcessTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var serviceSettingChildProcess
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined( 'PHPUNIT_RUN' ) ) {
            define( "PHPUNIT_RUN", "phpunit_run" );
        }

        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(){
    }

    /**
     * @covers serviceSettingChildProcess::post
     * @todo   Implement testPost().
     */
    public function testPost(){

        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                            'root_inoutfile' => '/var/log/nal/job',
                            'api_type'       => 'nal',
                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );

        $ret = new serviceSettingChildProcess( $param );
        $method = new ReflectionMethod( $ret, 'post' );
        $method->setAccessible( true );

        // case 1
        try {
            $method->invoke($ret);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        // case 2
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'post' );
        $method->setAccessible( true );
        $this->assertEquals($method->invoke($ret),'');

        $param['nal_conf']['job_type'] = '2';

        $ret = new serviceSettingChildProcess( $param );
        $method = new ReflectionMethod( $ret, 'post' );
        $method->setAccessible( true );

        // case 3
        try {
            $method->invoke($ret);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        // case 4
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'post' );
        $method->setAccessible( true );
        $this->assertEquals($method->invoke($ret),'');

    }

    /**
     * @covers serviceSettingChildProcess::put
     * @todo   Implement testPut().
     */
    public function testput(){

        $param = array(
                        'request_method' => 'PUT',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                            'root_inoutfile' => '/var/log/nal/job',
                            'api_type'       => 'nal',
                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );

        $ret = new serviceSettingChildProcess( $param );
        $method = new ReflectionMethod( $ret, 'put' );
        $method->setAccessible( true );

        // case 1
        try {
            $method->invoke($ret);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        // case 2
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'put' );
        $method->setAccessible( true );
        $this->assertEquals($method->invoke($ret),'');

        $param['nal_conf']['job_type'] = '2';

        $ret = new serviceSettingChildProcess( $param );
        $method = new ReflectionMethod( $ret, 'put' );
        $method->setAccessible( true );

        // case 3
        try {
            $method->invoke($ret);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        // case 4
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'put' );
        $method->setAccessible( true );
        $this->assertEquals($method->invoke($ret),'');

    }

    /**
     * @covers serviceSettingChildProcess::delete
     * @todo   Implement testDelete().
     */
    public function testDelete(){

        $param = array(
                        'request_method' => 'DELETE',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                            'root_inoutfile' => '/var/log/nal/job',
                            'api_type'       => 'nal',
                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );

        $ret = new serviceSettingChildProcess( $param );
        $method = new ReflectionMethod( $ret, 'delete' );
        $method->setAccessible( true );

        // case 1
        try {
            $method->invoke($ret);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        // case 2
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'delete' );
        $method->setAccessible( true );
        $this->assertEquals($method->invoke($ret),'');

        $param['nal_conf']['job_type'] = '2';

        $ret = new serviceSettingChildProcess( $param );
        $method = new ReflectionMethod( $ret, 'delete' );
        $method->setAccessible( true );

        // case 3
        try {
            $method->invoke($ret);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        // case 4
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'delete' );
        $method->setAccessible( true );
        $this->assertEquals($method->invoke($ret),'');

    }

    /**
     * @covers serviceSettingChildProcess::execCheckNal
     * @todo   Implement testExecCheckNal().
     */
    public function testExecCheckNal(){

        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );

        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod($ret, 'execCheckNal');
        $method->setAccessible(true);

        $ret->_p['no_execCheckNal_flg'] = '1';

        // case 1
        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 2
        $ret->_nalConf['job_type'] = '2';
        $this->assertEquals($method->invoke($ret,1,1),'');

    }

    /**
     * @covers serviceSettingChildProcess::checkJobCenterNal
     * @todo   Implement testCheckJobCenterNal().
     */
    public function testCheckJobCenterNal(){

        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                            'root_inoutfile' => '/var/log/nal/job',
                                            'api_type'       => 'nal',
                                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job-id'         => 'create-dcconnect.20160712010948',
                        'job_operation'  => 'create-dcconnect',
                        'device_type'    => '1'
        );
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'checkJobCenterNal' );
        $method->setAccessible( true );

        $ret->_p['no_checkJobCen_nal_flg'] = '1';

        // case 1
        $ret->_p['request-id'] = null;
        try {
            $method->invoke($ret,'',1,1);

        } catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'request-id is not set.');
        }

        // case2
        $ret->_p['job-id'] = null;
        try {
            $method->invoke($ret,1,1);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        $ret->_p['request-id']   = '20160708120000000000000';
        $ret->_p['job-id']       = 'create-dcconnect.20160712010948';
        $ret->_p['service_type'] = '2';

        // case 3
        $ret->_p['job-status'] = 'done';
        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 4
        $ret->_p['job-status'] = 'run';
        try {
            $method->invoke($ret,1,1);
        } catch( Exception $e ) {
            $this->assertContains('Condition error of the retry number of times. retry ',$e->getMessage());
        }

        // case 5
        $this->assertEquals($method->invoke($ret,2,1),'');

        // case 6
        $ret->_p['job-status'] = null;
        try {
            $method->invoke($ret,1,1);
        } catch( Exception $e ) {
            $this->assertContains('Condition error of the retry number of times. retry ',$e->getMessage());
        }

        // case 7
        $this->assertEquals($method->invoke($ret,2,1),'');

        // case 8
        $ret->_p['job-status'] = 999;
        try {
            $method->invoke($ret,1,1);
        } catch( Exception $e ) {
            $this->assertContains('It is in the unjust status. status ',$e->getMessage());
        }

        // case 9
        $this->assertEquals($method->invoke($ret,2,1),'');

    }

    /**
     * @covers serviceSettingChildProcess::checkJobSchedulerNal
     * @todo   Implement testCheckJobSchedulerNal().
     */
    public function testCheckJobSchedulerNal(){

        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job-id'         => 'create-vfw.20160712010948',
                        'job_operation'  => 'create-dcconnect',
                        'device_type'    => '1'
        );
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'checkJobSchedulerNal' );
        $method->setAccessible( true );

        $ret->_p['no_checkJobSche_nal_flg'] = '1';

        // case 1
        $ret->_p['request-id'] = null;
        try {
            $method->invoke($ret,1,1);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'request-id is not set.');
        }

        // case2
        $ret->_p['job-id'] = null;
        try {
            $method->invoke($ret,1,1);

        } catch( Exception $e ) {

            $this->assertEquals($e->getMessage(),'job-id is not set.');
        }

        $ret->_p['request-id'] = '20160708120000000000000';
        $ret->_p['job-id'] = 'create-dcconnect.20160712010948';
        $ret->_p['service_type'] = '2';

        // case 3
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:26.816Z">
<order created="2016-07-07T12:38:26.818Z"
id="75"
initial_state="success"
order="75"
path="/"
priority="0"
state="success"
state_text="job01 processed 75">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</answer>
</spooler>
STR;
        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 4
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:26.816Z">
<order created="2016-07-07T12:38:26.818Z"
id="75"
initial_state="success"
order="75"
path="/"
priority="0"
state="01"
state_text="job01 processed 75">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</answer>
</spooler>
STR;
        try {
            $method->invoke($ret,1,1);
        } catch( Exception $e ) {
            $this->assertContains('Condition error of the retry number of times. retry ',$e->getMessage());
        }

        // case 5
        $this->assertEquals($method->invoke($ret,2,1),'');

        // case 6
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:26.816Z">
<order created="2016-07-07T12:38:26.818Z"
id="75"
initial_state="success"
order="75"
path="/"
priority="0"
state="error"
state_text="job01 processed 75">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
<ERROR code="error" />
</answer>
</spooler>
STR;

        try {
            $method->invoke($ret,1,1);
        } catch( Exception $e ) {
            $this->assertContains('It is in the unjust status. status ',$e->getMessage());
        }

        // case 7
        $this->assertEquals($method->invoke($ret,2,1),'');

        // case 7
        try {
            $ret->_p['job_out'] = '';
            $this->assertEquals($method->invoke($ret,1,1),'');
        }catch( Exception $e){
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

    }

    /**
     * @covers serviceSettingChildProcess::callJobCenterForDb
     * @todo   Implement testCallJobCenterForDb().
     */
    public function testCallJobCenterForDb(){

        $param = array(
            'request_method' => 'POST',
            'function_type'  => 'dcconnect',
            'nal_conf'       => array(
                'root_inoutfile' => '/var/log/nal/job',
                     'api_type'       => 'nal',
                     'job_type'       => '1',
                ),
            'scenario'       => 'service',
            'request-id'     => '20160708120000000000000',
            'job_operation'  => 'create-dcconnect'
        );
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobCenterForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobCen_db_flg'] = '1';

        // case 1
        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['service_type'] = "1";
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:create-dcconnectFinalization.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret,'POST'),'');

        // case 3
        try {
            $ret->_p['job_out'] = '';
            $this->assertEquals($method->invoke($ret,'POST'),'');
        }catch( Exception $e){
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

        // case 4
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:delete-dcconnectFinalization.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret,'DELETE'),'');

        // case 5
        $ret->fileDirPath = '/var/log/nal/job/123456';
        $this->assertEquals($method->invoke($ret,'DELETE'),'');

        // case 6
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:update-dcconnectFinalization.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret,'PUT'),'');

        // case 7
        $ret->fileDirPath = '/var/log/nal/job/123456';
        $this->assertEquals($method->invoke($ret,'PUT'),'');
    }

    /**
     * @covers serviceSettingChildProcess::callJobSchedulerForDb
     * @todo   Implement testCallJobSchedulerForDb().
     */
    public function testCallJobSchedulerForDb(){

        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobSchedulerForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobSche_db_flg'] = '1';

        // case 1
        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['group_type'] = "1";
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;
        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 3
        $param = array(
                        'request_method' => 'DELETE',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'delete-dcconnect'
        );
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobSchedulerForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobSche_db_flg'] = '1';

        $ret->_p['device_type'] = "1";
        $ret->_p['group_type'] = "1";
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;

        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 4
        $param = array(
                        'request_method' => 'PUT',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'update-dcconnect'
        );
        $ret = new serviceSettingChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobSchedulerForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobSche_db_flg'] = '1';

        $ret->_p['device_type'] = "1";
        $ret->_p['group_type'] = "1";
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;

        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 5
        try {
            $ret->_p['job_out'] = '';
            $this->assertEquals($method->invoke($ret,1,1),'');
        }catch( Exception $e){
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

    }

    /**
     * @covers serviceSettingChildProcess::_execWimApi
     * @todo   Implement testExecWimApi().
     */
    public function testExecWimApi()
    {
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconnect';
        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                            'root_inoutfile' => '/var/log/nal/job',
                            'api_type'       => 'nal',
                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );
        $ret = new serviceSettingChildProcess( $param );

        // case 1
        $url = 'http://127.0.0.1/nalapi/test.html';
        $method = new ReflectionMethod($ret, '_execWimApi');
        $method->setAccessible(true);
        try {
            $method->invoke($ret,$url,$param,'POST',1);
        }catch( Exception $e) {
            $this->assertContains('API error',$e->getMessage());
        }

        // case 2(POST)
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execWimApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,$param,'POST',1));

        // case 3(DELETE)
        $param = array(
                        'request_method' => 'DELETE',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                            'root_inoutfile' => '/var/log/nal/job',
                            'api_type'       => 'nal',
                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'delete-dcconnect'
        );
        $ret = new serviceSettingChildProcess( $param );
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execWimApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,$param,'DELETE',1));

        // case 4(PUT)
        $param = array(
                        'request_method' => 'PUT',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'update-dcconnect'
        );
        $ret = new serviceSettingChildProcess( $param );
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execWimApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,$param,'PUT',1));

    }

    /**
     * @covers serviceSettingChildProcess::_makeInFile
     * @todo   Implement testMakeInFile().
     */
    public function testMakeInFile()
    {
        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                            'root_inoutfile' => '/var/log/nal/job',
                            'api_type'       => 'nal',
                            'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '123456',
                        'job_operation'  => 'create-dcconnect'
        );

        $ret = new serviceSettingChildProcessStb($param);
        $method = new ReflectionMethod($ret, '_makeInFile');
        $method->setAccessible(true);

        $ret->_p['no_makeInFile_flg'] = '1';

        // case1
        $result['data'] = array('test'=>'test');
        try{
            $method->invoke($ret,$result,'');
        }catch(Exception $e){
            $this->assertEquals($e->getMessage(),'file was not opened. (/var/log/nal/job/123456/IN.json)');
        }

        // case2
        $ret->fileDirPath = '/var/log/nal/job/123456';
        $result['data'] = array('test'=>'test');
        try{
            $method->invoke($ret,$result,'');
        }catch(Exception $e){
            $this->assertEquals($e->getMessage(),'file was not opened. (/var/log/nal/job/123456/IN.json)');
        }

        if( !is_dir( $ret->fileDirPath ) ) {
            mkdir( $ret->fileDirPath, 0755, true );
        }
        $pFile = $ret->fileDirPath . '/' . neccsNal_Config::IN_FILE;
        $wFile = fopen( $pFile, 'w+' );
        fwrite( $wFile, '' );
        fclose( $wFile );

        // case3
        $method->invoke($ret,$result,'');
        $this->assertArrayHasKey('test',json_decode( file_get_contents($ret->fileDirPath . '/' . neccsNal_Config::IN_FILE, true),true));

        // case4
        $method->invoke($ret,$result,'1');
        $this->assertArrayHasKey('data',json_decode( file_get_contents($ret->fileDirPath . '/' . neccsNal_Config::IN_FILE, true),true));
    }

    /**
     * @covers serviceSettingChildProcess::_execResult
     * @todo   Implement testExecResult().
     */
    public function testExecResult()
    {
        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'dcconnect',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-dcconnect'
        );

        $ret = new serviceSettingChildProcessStb($param);
        $method = new ReflectionMethod($ret, '_execResult');
        $method->setAccessible(true);

        // case 1
        $url = 'http://127.0.0.1/nalapi/test.html';
        $result = array(
            'result' => array(
                'status'     => 'error',
                'error-code' => 'NAL140001',
                'message'    => 'A system error occurred.',
            ),
            'request-id' => '20160708120000000000000',
        );

        try{
            $method->invoke($ret,$result,$url);
        }catch(Exception $e){
            $this->assertEquals($e->getMessage(),'A system error occurred.');
        }

        // case 2
        $url = 'http://127.0.0.1/nalapi/test.html';
        $result = array(
            'result' => array(
                'status'     => 'success',
                'error-code' => 'NAL100000',
                'message'    => '',
            ),
            'request-id' => '20160708120000000000000',
        );

        $this->assertEquals($method->invoke($ret,$result,$url),'');
    }

    /**
     *  remove Dir
     */
    function removeDir( $dir ) {

        $cnt = 0;
        if(!is_dir($dir)){
            return;
        }
        $handle = opendir($dir);
        if (!$handle) {
            return ;
        }
        while (false !== ($item = readdir($handle))) {
            if ($item === "." || $item === "..") {
                continue;
            }
            $path = $dir . DIRECTORY_SEPARATOR . $item;
            if (is_dir($path)) {
                $cnt = $cnt + $this->removeDir($path);
            } else {
                chmod($path,0644);
                @unlink($path);
            }
        }
        closedir($handle);
        if (!@rmdir($dir)) {
            return ;
        }
    }

    /**
     *  After action
     */
    public function testAfterAction() {
        // after job
        $dir = neccsNal_Config::LOG_DIR . "/job";
        $this->removeDir($dir);
    }
}
