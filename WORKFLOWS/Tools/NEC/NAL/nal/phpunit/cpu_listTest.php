<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-03 at 10:50:16.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/cpu_list.php';

class cpu_listTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var cpu_list
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers cpu_list::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = "/Nal/resource/";
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $execList = array(
            'apl_info' => array(
                '0' => array(
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID'             => '1',
                    'node_id'        => '1234',
                ),
                '1' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '2',
                    'node_id'        => '2345',
                ),
                '2' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '2',
                    'node_id'        => '3456',
                )
            ),
            'tenant_contract_info' => array(
                '0' => array(
                    'apl_type'       => 1,
                    'type'           => 1,
                    'device_type'    => 1,
                    'contract'       => '2',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 2,
                ),
                '1' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 1,
                    'contract'    => '4',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 3,
                ),
                '2' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 4,
                ),
                '3' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 5,
                ),
                '4' => array(
                    'apl_type'    => 2,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 6,
                ),
            )
        );

        // case1
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi' ));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue(array()));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));

        try {
            $method->invoke($stb);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'pod not exists.');
        }

        // dummy data Pod
        $retPodData[0]['pod_id'] = 'pod0001';
        $retPodData[0]['ID'] = 1;

        $flavorListForCnt[1][1]['count'] = '1';
        $flavorListForCnt[1][4]['count'] = '1';
        $flavorListForCnt[2][1]['count'] = '2';
        $flavorListForCnt[2][3]['count'] = '3';

        $data = array(
            'quota'   => '40',
            'use_info' => array(
                '1234' => '5',
                '3456' => '6'
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimResult = array(
            'result' => array(
                'status' => 'success'
            ),
            'data' => array(
                'wim_check_flg' => '1',
                'quota'   => '50',
                'use_info' => array(
                    '1234' => '5',
                    '3456' => '6'
                ),
                'flavor_list_for_cnt' => $flavorListForCnt,
            )
        );

        // case 2
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi', '_execApi', '_execProcess', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue($retPodData));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('_execProcess')->will($this->returnValue($data));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue(array( "10", "100", "200" )));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

        $_SERVER['REQUEST_URI'] = "/Nal/node/";
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '1';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );


        // dummy data Pod
        $retPodData[0]['pod_id'] = 'pod0001';

        $data = array(
            'quota'   => '40',
            'use_info' => array(
                '1234' => '5',
                '3456' => '6'
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        // case 3
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi', '_execApi', '_execProcess', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue($retPodData));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('_execProcess')->will($this->returnValue($data));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue(array( "10", "100", "200" )));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

        $_GET['type_detail']       = '2';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        // dummy data Pod
        $retPodData[0]['pod_id'] = 'pod0001';

        $wimResult = array(
            'result' => array(
                'status' => 'success'
            ),
            'data' => array(
                'wim_check_flg' => '1',
                'quota'   => '40',
                'use_info' => array(
                    '1234' => '5',
                    '3456' => '6'
                ),
                'flavor_list_for_cnt' => $flavorListForCnt,
            ),
        );

        // case 4
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi', '_execApi', '_execProcess', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue($retPodData));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('_execProcess')->will($this->returnValue($data));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue(array( "10", "100", "200" )));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = "/Nal/resource/";
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );


        $_GET['type_detail']       = '2';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        // dummy data Pod
        $retPodData[0]['pod_id'] = 'pod0001';

        // case 5
        $stb = $this->getMock('cpu_list',array( '_execProcess', 'success' ));
        $stb->expects($this->any())->method('_execProcess')->will($this->returnValue(array()));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $stb->_p['pod_id'] = 'pod0001';

        try {
            $method->invoke($stb);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'');
        }

        $wimResult = array(
            'result' => array(
                'status' => 'error',
                'error-code' => 'NAL110001',
                'message' => 'wim error'
            ),
            'data' => array(
            )
        );

        // case 6
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi', '_execApi'));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue($retPodData));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));

        try {
            $method->invoke($stb);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'wim error');
        }

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = "/Nal/resource/";
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        // dummy data Pod
        $retPodData[0]['pod_id'] = 'pod0001';

        $data = array(
            'quota'   => '40',
            'use_info' => array(
                    '1234' => '5',
                    '3456' => '6'
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimResult = array(
            'result' => array(
                'status' => 'success'
            ),
            'data' => array(
                'wim_check_flg' => '1',
                'quota'   => '40',
                'use_info' => array(
                    '1234' => '5',
                    '3456' => '6'
                ),
                'flavor_list_for_cnt' => $flavorListForCnt,
            ),
        );

        // case 7
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi', '_execApi', '_execProcess', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue($retPodData));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('_execProcess')->will($this->returnValue($data));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue(array( "10", "100", "200" )));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = "/Nal/resource/";
        $_GET['function_type']     = 'storage_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        // dummy data Pod
        $retPodData[0]['pod_id'] = 'pod0001';

        $data = array(
            'quota'   => '40',
            'use_info' => array(
                    '1234' => '5',
                    '3456' => '6'
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        // case 8
        $stb = $this->getMock('cpu_list',array( 'getPod', '_execMultiApi', '_execApi', '_execProcess', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('getPod')->will($this->returnValue($retPodData));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($execList));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('_execProcess')->will($this->returnValue($data));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue(array( "10", "100", "200" )));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     * @covers cpu_list::_getFlavorListForCnt
     * @todo   Implement testGetFlavorListForCnt().
     */
    public function testGetFlavorListForCnt()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_getFlavorListForCnt' );
        $method->setAccessible( true );

        $config = array(
            'os_image_and_flavor_name_list'=> array (
                '1'=> array (
                    '1'=> array (
                        'flavor_name'=>'intersecvm_sg-v4.1-M4D30E0S0C2F1.0P1',
                        'image_name'=>'intersecvm_sg-v4.1',
                    ),
                    '2'=> array (
                        'flavor_name'=>'fortigate_vm-5.2.4-M1D30E0S0C1F1.0P1',
                        'image_name'=>'fortigate_vm-5.2.4',
                    ),
                    '3'=> array (
                        'flavor_name'=>'paloalto_vm-7.0.5-M4D40E0S0C2F1.0P1',
                        'image_name'=>'paloalto_vm-7.0.5',
                    ),
                    '4'=> array (
                        'flavor_name'=>'intersecvm_sg-v4.1-M4D30E0S0C2F1.0P1',
                        'image_name'=>'intersecvm_sg-v4.1',
                    ),
                    '5'=> array (
                        'flavor_name'=>'',
                        'image_name'=>'',
                    ),
                ),
                '2'=> array (
                    '1'=> array (
                        'flavor_name'=>'intersecvm_lb-4.0-M16D50E0S0C2F1.0P1',
                        'image_name'=>'intersecvm_lb-4.0',
                      ),
                    '2'=> array (
                        'flavor_name'=>'big_ip_ve-12.0.0.0.0.606-M4D139E0S0C2F1.0P1',
                        'image_name'=>'big_ip-12.0.0.0.0.606',
                    ),
                    '3'=> array (
                        'flavor_name'=>'vthunder-4.0.1-M2D8E0S0C1F1.0P1',
                        'image_name'=>'vthunder-4.0.1',
                    ),
                    '4'=> array (
                        'flavor_name'=>'vthunder-4.0.1-M2D8E0S0C1F1.0P1',
                        'image_name'=>'vthunder-4.0.1',
                    ),
                ),
                '3'=> array (
                    '1'=> array (
                        'flavor_name'=>'vsrx-12.1x47_d20.7-M2D2E0S0C2F1.0P1',
                        'image_name'=>'vsrx-12.1x47_d20.7',
                    ),
                    '2'=> array (
                        'flavor_name'=>'csr1000v-03.17.01-M4D8E0S0C4F1.0P1',
                        'image_name'=>'csr1000v-03.17.01',
                    ),
                ),
            )
        );

        $confInfo[0]['config_info'] = json_encode( $config );

        $flavorCnt = array(
            'flavors' => array(
                '0' => array(
                    'name'  => 'intersecvm_sg-v4.1-M4D30E0S0C2F1.0P1',
                    'vcpus' => '1',
                    'disk'  => '2',
                    'ram'   => '3000',
                ),
                '1' => array(
                    'name'  => 'intersecvm_lb-4.0-M16D50E0S0C2F1.0P1',
                    'vcpus' => '2',
                    'disk'  => '3',
                    'ram'   => '4000',
                ),
                '2' => array(
                    'name'  => 'vthunder-4.0.1-M2D8E0S0C1F1.0P1',
                    'vcpus' => '3',
                    'disk'  => '4',
                    'ram'   => '5000',
                ),
            ),
        );

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.70.89:5000/v2.0';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '0fba6fb2f1cf40d68928aafd39e981d1';
        $endpoint_info['role_id']            = '9715c36ef48c44d0ad4bca16d863cc25';
        $endpoint_info['admin_tenant_name']  = 'admin';

        $retData[0]['endpoint_info'] = json_encode( $endpoint_info );

        $result = array(
            '1'=> array(
                '1' => array( 'count' => '1' ),
                '4' => array( 'count' => '1' ),
            ),
            '2'=> array(
                '1' => array( 'count' => '2' ),
                '3' => array( 'count' => '3' ),
                '4' => array( 'count' => '3' ),
            ),
        );

        // case 1
        $stb = $this->getMock('cpu_list',array( 'getConfig', 'listFlavorsDetail'));
        $stb->expects($this->any())->method('getConfig')->will($this->returnValue($confInfo));
        $stb->expects($this->any())->method('listFlavorsDetail')->will($this->returnValue($flavorCnt));
        $this->assertEquals( $method->invoke($stb, 'pod0001', $retData),$result);

        // case 2
        $stb = $this->getMock('cpu_list',array( 'getConfig', 'listFlavorsDetail'));
        $stb->expects($this->any())->method('getConfig')->will($this->returnValue(array()));
        $stb->expects($this->any())->method('listFlavorsDetail')->will($this->returnValue($flavorCnt));
        $this->assertEquals( $method->invoke($stb, 'pod0001', $retData),array());

    }

    /**
     * @covers cpu_list::_execProcess
     * @todo   Implement testExecProcess().
     */
    public function testExecProcess()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_execProcess' );
        $method->setAccessible( true );

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.70.89:5000/v2.0';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '0fba6fb2f1cf40d68928aafd39e981d1';
        $endpoint_info['role_id']            = '9715c36ef48c44d0ad4bca16d863cc25';
        $endpoint_info['admin_tenant_name']  = 'admin';

        $retData[0]['endpoint_info'] = json_encode( $endpoint_info );

        $listUsage = '{"tenant_usages":[{"server_usages":[{"ended_at":null,"flavor":"csr1000v-03.17.01-M4D8E0S0C4F1.0P1","hours":4.444444444444445e-08,"instance_id":"93f13f83-863b-47f1-a7a3-e0c1757313cb","local_gb":1,"memory_mb":512,"name":"T00024dc01ce01","started_at":"2016-10-20T07:12:40.000000","state":"stopped","tenant_id":"f711f1db1f014d589234cdb5010c39e4","uptime":2346499,"vcpus":1},],"start":"2016-11-16T11:00:59.696802","stop":"2016-11-16T11:00:59.696818","tenant_id":"f711f1db1f014d589234cdb5010c39e4","total_hours":1.3333333333333334e-07,"total_local_gb_usage":1000,"total_memory_mb_usage":8000,"total_vcpus_usage":1},{"server_usages":[{"ended_at":null,"flavor":"fortigate_vm-5.2.4-M1D30E0S0C1F1.0P1","hours":4.444444444444445e-08,"instance_id":"5d0d083b-82b6-471c-9808-717824a39254","local_gb":1,"memory_mb":512,"name":"nal_vfw_20_fort01","started_at":"2016-10-21T00:39:05.000000","state":"stopped","tenant_id":"ee60e6eccc0e458daff42a6ec39ad9c0","uptime":2283714,"vcpus":1},],"start":"2016-11-16T11:00:59.696802","stop":"2016-11-16T11:00:59.696818","tenant_id":"ee60e6eccc0e458daff42a6ec39ad9c0","total_hours":1.3333333333333334e-07,"total_local_gb_usage":500,"total_memory_mb_usage":3000,"total_vcpus_usage":1},}]}';

        $hostDetail = array(
            '0' => array(
                'cpu' => 1,
                'disk_gb' => 1000,
                'memory_mb' => 8200,
            )
        );

        $flavorListForCnt[1][1]['count'] = '1';
        $flavorListForCnt[1][4]['count'] = '1';
        $flavorListForCnt[2][1]['count'] = '2';
        $flavorListForCnt[2][3]['count'] = '3';

        $setData = array(
            'quota' => '10',
            'use_info' => '5',
            'flavor_list_for_cnt' => $flavorListForCnt
        );

        $result = array();
        $result = $setData;
        // case 1
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        // case 2
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $stb->_p['type_detail'] = '2';
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        $retData = array();
        $setData = array(
            'quota' => '0',
            'use_info' => array(),
            'flavor_list_for_cnt' => array(),
        );

        $result = array();
        $result = $setData;

        // case 3
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        // case 4
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_execProcess' );
        $method->setAccessible( true );

        $retData = array();
        $setData = array(
            'quota' => '0',
            'use_info' => array(),
            'flavor_list_for_cnt' => array(),
        );

        $result = array();
        $result = $setData;

        // case 5
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        // case 6
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'storage_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_execProcess' );
        $method->setAccessible( true );

        $retData = array();
        $setData = array(
            'quota' => '0',
            'use_info' => array(),
            'flavor_list_for_cnt' => array(),
        );

        $result = array();
        $result = $setData;

        // case 7
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

        // case 8
        $stb = $this->getMock('cpu_list',array( 'getEndpoint', 'listUsageReport', 'listHostDetail', '_getFlavorListForCnt', 'setData'));
        $stb->expects($this->any())->method('getEndpoint')->will($this->returnValue($retData));
        $stb->expects($this->any())->method('listUsageReport')->will($this->returnValue(json_decode( $listUsage, true )));
        $stb->expects($this->any())->method('listHostDetail')->will($this->returnValue($hostDetail));
        $stb->expects($this->any())->method('_getFlavorListForCnt')->will($this->returnValue($flavorListForCnt));
        $stb->expects($this->any())->method('setData')->will($this->returnValue($setData));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $this->assertEquals( $method->invoke($stb, 'pod0001'),$result);

    }

    /**
     * @covers cpu_list::_execResult
     * @todo   Implement testExecResult().
     */
    public function testExecResult()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'resource';
        $_SERVER['REQUEST_URI'] = "/Nal/resource/";
        $ret = new cpu_list();
        $method = new ReflectionMethod($ret, '_execResult');
        $method->setAccessible(true);

        $url = 'http://127.0.0.1/Nal/';

        // case 1
        $err = array();
        $this->assertEquals($method->invoke($ret,$err,$url),'');

        // case 2
        $err['result'] = array( 'error-code' => 'NAL100000', 'message' => '' );
        try{
            $method->invoke($ret,$err,$url);
        }catch(Exception $e){
            $this->assertEquals('',$e->getMessage());
        }

        // case 3
        $err['result'] = array( 'error-code' => 'NAL140001', 'message' => 'test' );
        try{
            $method->invoke($ret,$err,$url);
        }catch(Exception $e){
            $this->assertEquals('test',$e->getMessage());
        }
    }

    /**
     * @covers cpu_list::setFlavorData
     * @todo   Implement testSetFlavorData().
     */
    public function testSetFlavorData()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'setFlavorData' );
        $method->setAccessible( true );

        $config = array(
            'os_image_and_flavor_name_list'=> array (
                '1'=> array (
                    '1'=> array (
                        'flavor_name'=>'intersecvm_sg-v4.1-M4D30E0S0C2F1.0P1',
                        'image_name'=>'intersecvm_sg-v4.1',
                    ),
                    '2'=> array (
                        'flavor_name'=>'fortigate_vm-5.2.4-M1D30E0S0C1F1.0P1',
                        'image_name'=>'fortigate_vm-5.2.4',
                    ),
                    '3'=> array (
                        'flavor_name'=>'paloalto_vm-7.0.5-M4D40E0S0C2F1.0P1',
                        'image_name'=>'paloalto_vm-7.0.5',
                    ),
                    '4'=> array (
                        'flavor_name'=>'intersecvm_sg-v4.1-M4D30E0S0C2F1.0P1',
                        'image_name'=>'intersecvm_sg-v4.1',
                    ),
                    '5'=> array (
                        'flavor_name'=>'',
                        'image_name'=>'',
                    ),
                ),
                '2'=> array (
                    '1'=> array (
                        'flavor_name'=>'intersecvm_lb-4.0-M16D50E0S0C2F1.0P1',
                        'image_name'=>'intersecvm_lb-4.0',
                      ),
                    '2'=> array (
                        'flavor_name'=>'big_ip_ve-12.0.0.0.0.606-M4D139E0S0C2F1.0P1',
                        'image_name'=>'big_ip-12.0.0.0.0.606',
                    ),
                    '3'=> array (
                        'flavor_name'=>'vthunder-4.0.1-M2D8E0S0C1F1.0P1',
                        'image_name'=>'vthunder-4.0.1',
                    ),
                ),
                '3'=> array (
                    '1'=> array (
                        'flavor_name'=>'vsrx-12.1x47_d20.7-M2D2E0S0C2F1.0P1',
                        'image_name'=>'vsrx-12.1x47_d20.7',
                    ),
                    '2'=> array (
                        'flavor_name'=>'csr1000v-03.17.01-M4D8E0S0C4F1.0P1',
                        'image_name'=>'csr1000v-03.17.01',
                    ),
                ),
            )
        );

        $flavorCnt = array(
            'flavors' => array(
                '0' => array(
                    'name'  => 'intersecvm_sg-v4.1-M4D30E0S0C2F1.0P1',
                    'vcpus' => '1',
                    'disk'  => '2000',
                    'ram'   => '500',
                ),
                '1' => array(
                    'name'  => 'intersecvm_lb-4.0-M16D50E0S0C2F1.0P1',
                    'vcpus' => '2',
                    'disk'  => '3000',
                    'ram'   => '600',
                ),
                '2' => array(
                    'name'  => 'vthunder-4.0.1-M2D8E0S0C1F1.0P1',
                    'vcpus' => '3',
                    'disk'  => '4000',
                    'ram'   => '700',
                ),
            ),
        );

        $result = array();
        $result[1][1]['count'] = '1';
        $result[1][4]['count'] = '1';
        $result[2][1]['count'] = '2';
        $result[2][3]['count'] = '3';

        // case 1
        $this->assertEquals( $method->invoke($ret, $config['os_image_and_flavor_name_list'], $flavorCnt ), $result);


        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'storage_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'setFlavorData' );
        $method->setAccessible( true );

        $result = array();
        $result[1][1]['count'] = '2000';
        $result[1][4]['count'] = '2000';
        $result[2][1]['count'] = '3000';
        $result[2][3]['count'] = '4000';

        // case 2
        $this->assertEquals( $method->invoke($ret, $config['os_image_and_flavor_name_list'], $flavorCnt ), $result);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, 'setFlavorData' );
        $method->setAccessible( true );

        $result = array();
        $result[1][1]['count'] = '500';
        $result[1][4]['count'] = '500';
        $result[2][1]['count'] = '600';
        $result[2][3]['count'] = '700';

        // case 3
        $this->assertEquals( $method->invoke($ret, $config['os_image_and_flavor_name_list'], $flavorCnt ), $result);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'storage_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '2';

        $flavorCnt = array(
            'flavors' => array(
                '0' => array(
                    'name'  => 'csr1000v-03.17.01-M4D8E0S0C4F1.0P1',
                    'vcpus' => '3',
                    'disk'  => '300',
                    'ram'   => '500',
                ),
                '1' => array(
                    'name'  => 'intersecvm_lb-4.0-M16D50E0S0C2F1.0P1',
                    'vcpus' => '2',
                    'disk'  => '3000',
                    'ram'   => '600',
                ),
                '2' => array(
                    'name'  => 'vthunder-4.0.1-M2D8E0S0C1F1.0P1',
                    'vcpus' => '3',
                    'disk'  => '4000',
                    'ram'   => '700',
                ),
            ),
        );

        $result = array();
        $result[3][2]['count'] = '500';

        // case 4
        $ret->_nalConf['api_type'] = 'wim';
        $this->assertEquals( $method->invoke($ret, $config['os_image_and_flavor_name_list'], $flavorCnt ), $result);

    }

    /**
     * @covers cpu_list::setData
     * @todo   Implement testSetData().
     */
    public function testSetData()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $usagesInfo = array(
            'tenant_usages' => array(
                '0' => array(
                    'tenant_id' => '1234',
                    'server_usages' => array(
                        '0' => array(
                            'instance_id' => '1234',
                            'vcpus'       => 1,
                            'memory_mb'   => 8000,
                            'local_gb'    => 1000
                        ),
                        '1' => array(
                            'vcpus'       => 1,
                            'memory_mb'   => 7000,
                            'local_gb'    => 900,
                            'instance_id' => '2345',
                        ),
                   ),
                ),
            )
        );
        $hostDetail = array(
            '0' => array(
                'cpu' => 1,
                'disk_gb' => 2000,
                'memory_mb' => 8200,
            ),
            '1' => array(
                'cpu' => 2,
                'disk_gb' => 2000,
                'memory_mb' => 8200,
            )
        );

        $ret = new cpu_list();
        $reflection_class = new ReflectionClass( $ret );
        $property = $reflection_class->getProperty('_quotaInfo');
        $property->setAccessible( true );

        $property->setValue($ret, $hostDetail );

        $property = $reflection_class->getProperty('_usagesInfo');
        $property->setAccessible( true );

        $property->setValue($ret, $usagesInfo );

        $method = $reflection_class->getMethod('setData');
        $method->setAccessible(true);

        $setData = array(
            'quota' => '3',
            'use_info' => array(
                '1234' => '1',
                '2345' => '1'
            ),
        );

        // case 1
        $this->assertEquals( $method->invoke($ret),$setData);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $reflection_class = new ReflectionClass( $ret );
        $property = $reflection_class->getProperty('_quotaInfo');
        $property->setAccessible( true );

        $property->setValue($ret, $hostDetail );

        $property = $reflection_class->getProperty('_usagesInfo');
        $property->setAccessible( true );

        $property->setValue($ret, $usagesInfo );

        $method = $reflection_class->getMethod('setData');
        $method->setAccessible(true);

        $setData = array(
            'quota' => '16400',
            'use_info' => array(
                             '1234' => '8000',
                             '2345' => '7000',
                         ),
        );

        // case 2
        $this->assertEquals( $method->invoke($ret),$setData);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'storage_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $reflection_class = new ReflectionClass( $ret );
        $property = $reflection_class->getProperty('_quotaInfo');
        $property->setAccessible( true );

        $property->setValue($ret, $hostDetail );

        $property = $reflection_class->getProperty('_usagesInfo');
        $property->setAccessible( true );

        $property->setValue($ret, $usagesInfo );

        $method = $reflection_class->getMethod('setData');
        $method->setAccessible(true);

        $setData = array(
            'quota' => '4000',
            'use_info' => array(
                '1234' => '1000',
                '2345' => '900',
            )
        );

        // case 3
        $this->assertEquals( $method->invoke($ret),$setData);

    }

    /**
     * @covers cpu_list::_getContInfo
     * @todo   Implement testGetContInfo().
     */
    public function testGetContInfo()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'cpu_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '1';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $execList = array(
            'apl_info' => array(
                '0' => array(
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID'             => '1',
                    'node_id'        => '1234',
                ),
                '1' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '2',
                    'node_id'        => '2345',
                ),
                '2' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '3',
                    'node_id'        => '3456',
                ),
                '3' => array(
                    'tenant_name'    => 'tenant3',
                    'IaaS_tenant_id' => '3456',
                    'ID'             => '4',
                    'node_id'        => '5555',
                )
            ),
            'tenant_contract_info' => array(
                '0' => array(
                    'apl_type'       => 1,
                    'type'           => 1,
                    'device_type'    => 1,
                    'contract'       => '2',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 2,
                ),
                '1' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 1,
                    'contract'    => '4',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 3,
                ),
                '2' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 4,
                ),
                '3' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 5,
                ),
                '4' => array(
                    'apl_type'    => 1,
                    'type'        => 3,
                    'device_type' => 2,
                    'contract'    => '1',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 6,
                ),
                '5' => array(
                    'apl_type'    => 2,
                    'type'        => 1,
                    'device_type' => 2,
                    'contract'    => '1',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 7,
                ),
            )
        );

        $flavorListForCnt[1][1]['count'] = '10';
        $flavorListForCnt[1][1]['count'] = '10';
        $flavorListForCnt[1][1]['count'] = '10';
        $flavorListForCnt[1][2]['count'] = '10';
        $flavorListForCnt[1][3]['count'] = '10';
        $flavorListForCnt[1][4]['count'] = '10';
        $flavorListForCnt[1][5]['count'] = '10';
        $flavorListForCnt[2][1]['count'] = '20';
        $flavorListForCnt[2][2]['count'] = '20';
        $flavorListForCnt[2][3]['count'] = '20';
        $flavorListForCnt[2][4]['count'] = '20';

        $flavorListForCntWim[3][2]['count'] = '30';

        $nalData = array(
            'quota' => '60',
            'use_info' => array(
                '1234' => '900',
                '2345' => '1000',
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimData = array(
            'wim_check_flg' => 1,
            'flavor_list_for_cnt' => $flavorListForCntWim,
        );

        // case 1
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "60", "1900", "340" ));

        $execList = array(
            'apl_info' => array(
                '0' => array(
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID'             => '1',
                    'node_id'        => '1234',
                ),
                '1' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '2',
                    'node_id'        => '2345',
                ),
                '2' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '3',
                    'node_id'        => '3456',
                ),
                '3' => array(
                    'tenant_name'    => 'tenant3',
                    'IaaS_tenant_id' => '3456',
                    'ID'             => '4',
                    'node_id'        => '5555',
                )
            ),
            'tenant_contract_info' => array(
                '0' => array(
                    'apl_type'       => 1,
                    'type'           => 1,
                    'device_type'    => 1,
                    'contract'       => '2',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 2,
                ),
                '1' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 1,
                    'contract'    => '4',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 3,
                ),
                '2' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 4,
                ),
                '3' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 5,
                ),
                '4' => array(
                    'apl_type'    => 1,
                    'type'        => 3,
                    'device_type' => 2,
                    'contract'    => '1',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 6,
                ),
                '5' => array(
                    'apl_type'    => 1,
                    'type'        => 1,
                    'device_type' => 1,
                    'contract'    => '10',
                    'tenant_name'    => 'tenant4',
                    'IaaS_tenant_id' => '4567',
                    'ID' => 6,
                ),
            )
        );

        $nalData = array(
            'quota' => '100',
            'use_info' => array(
                '1234' => '900',
                '2345' => '1000',
                '5555' => '1000',
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimData = array(
            'wim_check_flg' => 1,
            'flavor_list_for_cnt' => $flavorListForCntWim,
        );

        // case 2
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "100", "2900", "440" ));

        $nalData = array(
            'quota' => '100',
            'use_info' => array(
                '1234' => '900',
                '2345' => '1000',
                '3456' => '1000',
                '5555' => '1000',
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        // case 3
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "100", "3900", "440" ));

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $execList = array(
            'apl_info' => array(
                '0' => array(
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID'             => '1',
                    'node_id'        => '1234',
                ),
                '1' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '2',
                    'node_id'        => '2345',
                ),
                '2' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '3',
                    'node_id'        => '3456',
                ),
                '3' => array(
                    'tenant_name'    => 'tenant3',
                    'IaaS_tenant_id' => '3456',
                    'ID'             => '4',
                    'node_id'        => '5555',
                )
            ),
            'tenant_contract_info' => array(
                '0' => array(
                    'apl_type'       => 1,
                    'type'           => 1,
                    'device_type'    => 1,
                    'contract'       => '2',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 2,
                ),
                '1' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 1,
                    'contract'    => '4',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 3,
                ),
                '2' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 4,
                ),
                '3' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 5,
                ),
                '4' => array(
                    'apl_type'    => 1,
                    'type'        => 3,
                    'device_type' => 2,
                    'contract'    => '1',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 6,
                ),
                '5' => array(
                    'apl_type'    => 1,
                    'type'        => 3,
                    'device_type' => 2,
                    'contract'    => '10',
                    'tenant_name'    => 'tenant4',
                    'IaaS_tenant_id' => '4567',
                    'ID' => 6,
                ),
            )
        );

        $flavorListForCnt[1][1]['count'] = '100';
        $flavorListForCnt[1][1]['count'] = '100';
        $flavorListForCnt[1][1]['count'] = '100';
        $flavorListForCnt[1][2]['count'] = '100';
        $flavorListForCnt[1][3]['count'] = '100';
        $flavorListForCnt[1][4]['count'] = '100';
        $flavorListForCnt[1][5]['count'] = '100';
        $flavorListForCnt[2][1]['count'] = '200';
        $flavorListForCnt[2][2]['count'] = '200';
        $flavorListForCnt[2][3]['count'] = '200';
        $flavorListForCnt[2][4]['count'] = '200';

        $flavorListForCntWim[3][2]['count'] = '300';

        $nalData = array(
            'quota' => '200',
            'use_info' => array(
                '1234' => '900',
                '2345' => '1000',
                '5555' => '1000',
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimData = array(
            'wim_check_flg' => 1,
            'flavor_list_for_cnt' => $flavorListForCntWim,
        );

        // case 4
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "200", "2900", "4600" ));


        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'storage_detail';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '2';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $flavorListForCnt[1][1]['count'] = '1000';
        $flavorListForCnt[1][1]['count'] = '1000';
        $flavorListForCnt[1][1]['count'] = '1000';
        $flavorListForCnt[1][2]['count'] = '1000';
        $flavorListForCnt[1][3]['count'] = '1000';
        $flavorListForCnt[1][4]['count'] = '1000';
        $flavorListForCnt[1][5]['count'] = '1000';
        $flavorListForCnt[2][1]['count'] = '2000';
        $flavorListForCnt[2][2]['count'] = '2000';
        $flavorListForCnt[2][3]['count'] = '2000';
        $flavorListForCnt[2][4]['count'] = '2000';

        $flavorListForCntWim[3][2]['count'] = '3000';

        $nalData = array(
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimData = array(
            'wim_check_flg' => 1,
            'quota' => '5000',
            'use_info' => array(
                '1234' => '900',
                '2345' => '1000',
            ),
            'flavor_list_for_cnt' => $flavorListForCntWim,
        );

        // case 5
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "5000", "1900", "12000" ));

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'memory_list';
        $_GET['scenario']          = 'resource';
        $_GET['type_detail']       = '3';

        $ret = new cpu_list();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $nalData = array(
            'quota' => '200',
            'use_info' => array(
                '1234' => '900',
                '2345' => '1000',
                '5555' => '1000',
            ),
            'flavor_list_for_cnt' => $flavorListForCnt,
        );

        $wimData = array(
            'wim_check_flg' => 1,
            'flavor_list_for_cnt' => $flavorListForCntWim,
        );

        $execList = array(
            'apl_info' => array(),
            'tenant_contract_info' => array(
                '0' => array(
                    'apl_type'       => 1,
                    'type'           => 1,
                    'device_type'    => 1,
                    'contract'       => '2',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 2,
                ),
                '1' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 1,
                    'contract'    => '4',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 3,
                ),
                '2' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID' => 4,
                ),
                '3' => array(
                    'apl_type'    => 1,
                    'type'        => 2,
                    'device_type' => 3,
                    'contract'    => '6',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 5,
                ),
                '4' => array(
                    'apl_type'    => 1,
                    'type'        => 3,
                    'device_type' => 2,
                    'contract'    => '1',
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID' => 6,
                ),
                '5' => array(
                    'apl_type'    => 1,
                    'type'        => 3,
                    'device_type' => 2,
                    'contract'    => '10',
                    'tenant_name'    => 'tenant4',
                    'IaaS_tenant_id' => '4567',
                    'ID' => 6,
                ),
            )
        );

        // case 6
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "200", "0", "46000" ));

        $execList = array(
            'apl_info' => array(
                '0' => array(
                    'tenant_name'    => 'tenant1',
                    'IaaS_tenant_id' => '1234',
                    'ID'             => '1',
                    'node_id'        => '1234',
                ),
                '1' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '2',
                    'node_id'        => '2345',
                ),
                '2' => array(
                    'tenant_name'    => 'tenant2',
                    'IaaS_tenant_id' => '2345',
                    'ID'             => '3',
                    'node_id'        => '3456',
                ),
                '3' => array(
                    'tenant_name'    => 'tenant3',
                    'IaaS_tenant_id' => '3456',
                    'ID'             => '4',
                    'node_id'        => '5555',
                )
            ),
            'tenant_contract_info' => array()
        );

        // case 7
        $this->assertEquals( $method->invoke($ret, $nalData, $wimData, $execList), array( "200", "2900", "0" ));

    }

}
