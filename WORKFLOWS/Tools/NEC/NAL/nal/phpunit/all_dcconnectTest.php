<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-02 at 16:52:18.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/all_dcconnect.php';

class all_dcconnectTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var all_dcconnect
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers all_dcconnect::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'all_dcconnect';
        $_GET['IaaS_tenant_id'] = '1234';
        $_SERVER['REQUEST_URI'] = "/Nal/service/?function_type=dcconnect&IaaS_tenant_id=1234";
        $ret = new all_dcconnect();
        $method = new ReflectionMethod($ret, 'get');
        $method->setAccessible(true);

        //case 1
        try {
            //$method->invoke($ret);
        }catch( Exception $e ) {
            $this->assertContains('API error',$e->getMessage());
        }

        //case 2
        // mock
        $stb = $this->getMock('all_dcconnect',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(array('test')));
        $this->assertEquals($method->invoke($stb),'');

        // case 3
        // mock
        $stb = $this->getMock('all_dcconnect',array('_execApi', '_getTenant','_execResult'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(array('test')));
        $stb->expects($this->any())->method('_execResult')->will($this->returnValue(array('test')));
        $this->assertEquals( $method->invoke($stb),'');

        $ret->_nalConf['api_type'] = 'wim';

        //case 4
        try {
            //$method->invoke($ret);
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }

        //case 5
        // mock
        $stb = $this->getMock('all_dcconnect',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(array('test')));
        $this->assertEquals($method->invoke($stb),'');

        // case 6
        // mock
        $ret = new all_dcconnect();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $stb = $this->getMock('all_dcconnect',array('_setDataForDc','_execApi', '_getTenant', 'success'));
        $stb->expects($this->any())->method('_setDataForDc')->will($this->returnValue(0));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(array('test')));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnValue('1234'));
        $stb->expects($this->any())->method('success')->will($this->returnValue(array('test')));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $this->assertEquals($method->invoke($stb),'');

        $wimResult = array(
            'result' => array(
                'status' => 'success',
                'error-code'    => 'NAL100000',
                'message' => 'wim success'
            ),
            'data' => array(
                'my_group_list'   => array(
                    '3456' => array(
                        '0' => 'dc02',
                    )
                ),
                '0' => array(
                                'group_id' => '3456',
                                'group_name' => 'group1',
                ),
                '1' => array(
                                'group_id' => '5555',
                                'group_name' => 'group2',
                ),
            )
        );

        $result = array(
                '0' => array(
                                'group_id' => '3456',
                                'group_name' => 'group1',
                                'my_group_flg' => 1,
                ),
                '1' => array(
                                'group_id' => '5555',
                                'group_name' => 'group2',
                ),
        );

        //case 7
        $stb = $this->getMock('all_dcconnect',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->_p['my_dc_id'] = 'dc02';

        try {
            $method->invoke($stb);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'wim success');
        }
    }

    /**
     * @covers all_dcconnect::_execResult
     * @todo   Implement testExecResult().
     */
    public function testExecResult()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'all_dcconnect';
        $_SERVER['REQUEST_URI'] = "/Nal/node/";
        $ret = new all_dcconnect();
        $method = new ReflectionMethod($ret, '_execResult');
        $method->setAccessible(true);

        $url = 'http://127.0.0.1/Nal/';

        // case 1
        $err = array();
        $this->assertEquals($method->invoke($ret,$err,$url),'');

        // case 2
        $err['result'] = array( 'error-code' => 'NAL100000', 'message' => '' );
        try{
            $method->invoke($ret,$err,$url);
        }catch(Exception $e){
            $this->assertEquals('',$e->getMessage());
        }

        // case 3
        $err['result'] = array( 'error-code' => 'NAL140001', 'message' => 'test' );
        try{
            $method->invoke($ret,$err,$url);
        }catch(Exception $e){
            $this->assertEquals('test',$e->getMessage());
        }
    }

    /**
     * @covers all_dcconnect::_setDataForDc
     * @todo   Implement testSetDataForDc().
     */
    public function testSetDataForDc()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'all_dcconnect';
        $_SERVER['REQUEST_URI'] = "/Nal/service/?function_type=all_dcconnect&IaaS_tenant_id=1234";
        $ret = new all_dcconnect();
        $method = new ReflectionMethod($ret, '_setDataForDc');
        $method->setAccessible(true);

        $res = array(
                        '0' => array(
                                        'group_id' => '3456',
                                        'group_name' => 'group1',
                        ),
                        '1' => array(
                                        'group_id' => '5555',
                                        'group_name' => 'group2',
                        ),
        );

        // case 1
        $result = $method->invoke($ret,$res);
        $this->assertEquals($result,$res);

        // case 2
        $res = array(
                        '0' => array(
                                        'group_id' => '3456',
                                        'group_name' => 'group1',
                        ),
                        '1' => array(
                                        'group_id' => '5555',
                                        'group_name' => 'group2',
                        ),
        );

        // mock
        $stb = $this->getMock('all_dcconnect',array('_getTenant','_execApiHttpMethod'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnValue('1234'));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array (
                        '0' => array('dc_id'=>'1234','group_id'=>'1234'),
                        '1' => array('dc_id'=>'1111','group_id'=>'2345'),
                        '2' => array('dc_id'=>'3333','group_id'=>'3456'),
                        '3' => array('dc_id'=>'2222','group_id'=>'4321')
        )));
        $stb->_p['IaaS_tenant_id'] = '1234';
        $result = $method->invoke($stb,$res);
        $this->assertArrayHasKey('my_group_list', $result);

    }

}
