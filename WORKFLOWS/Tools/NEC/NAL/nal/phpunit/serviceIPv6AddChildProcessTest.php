<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-12 at 15:19:56.
 */

require_once dirname(__FILE__) . '/Stub/serviceIPv6AddChildProcessStb.php';
require_once dirname(__FILE__) . '/../Nal/bin/app/serviceIPv6AddChildProcess.php';

class serviceIPv6AddChildProcessTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var serviceIPv6AddChildProcess
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined( 'PHPUNIT_RUN' ) ) {
            define( "PHPUNIT_RUN", "phpunit_run" );
        }

        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(){
    }

    /**
     * @covers serviceIPv6AddChildProcess::callJobCenterForDb
     * @todo   Implement testCallJobCenterForDb().
     */
    public function testCallJobCenterForDb(){

        $param = array(
            'request_method' => 'POST',
            'function_type'  => 'serviceIPv6Add',
            'nal_conf'       => array(
                'root_inoutfile' => '/var/log/nal/job',
                     'api_type'       => 'nal',
                     'job_type'       => '1',
                ),
            'scenario'       => 'service',
            'request-id'     => '20160708120000000000000',
            'job_operation'  => 'create-serviceIPv6Add'
        );
        $ret = new serviceIPv6AddChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobCenterForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobCen_db_flg'] = '1';

        // case 1
        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['service_type'] = "1";
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:create-serviceIPv6AddFinalization.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret,'POST'),'');

        // case 3
        try {
            $ret->_p['job_out'] = '';
            $this->assertEquals($method->invoke($ret,'POST'),'');
        }catch( Exception $e){
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

        // case 4
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:delete-serviceIPv6AddFinalization.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret,'DELETE'),'');

        // case 5
        $ret->fileDirPath = '/var/log/nal/job/123456';
        $this->assertEquals($method->invoke($ret,'DELETE'),'');

        // case 6
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:update-serviceIPv6AddFinalization.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret,'PUT'),'');

        // case 7
        $ret->fileDirPath = '/var/log/nal/job/123456';
        $this->assertEquals($method->invoke($ret,'PUT'),'');
    }

    /**
     * @covers serviceIPv6AddChildProcess::callJobSchedulerForDb
     * @todo   Implement testCallJobSchedulerForDb().
     */
    public function testCallJobSchedulerForDb(){

        $param = array(
                        'request_method' => 'POST',
                        'function_type'  => 'serviceIPv6Add',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'create-serviceIPv6Add'
        );
        $ret = new serviceIPv6AddChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobSchedulerForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobSche_db_flg'] = '1';

        // case 1
        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['group_type'] = "1";
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;
        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 3
        $param = array(
                        'request_method' => 'DELETE',
                        'function_type'  => 'serviceIPv6Add',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'delete-serviceIPv6Add'
        );
        $ret = new serviceIPv6AddChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobSchedulerForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobSche_db_flg'] = '1';

        $ret->_p['device_type'] = "1";
        $ret->_p['group_type'] = "1";
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;

        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 4
        $param = array(
                        'request_method' => 'PUT',
                        'function_type'  => 'serviceIPv6Add',
                        'nal_conf'       => array(
                                        'root_inoutfile' => '/var/log/nal/job',
                                        'api_type'       => 'nal',
                                        'job_type'       => '1',
                        ),
                        'scenario'       => 'service',
                        'request-id'     => '20160708120000000000000',
                        'job_operation'  => 'update-serviceIPv6Add'
        );
        $ret = new serviceIPv6AddChildProcessStb( $param );
        $method = new ReflectionMethod( $ret, 'callJobSchedulerForDb' );
        $method->setAccessible( true );

        $ret->_p['no_callJobSche_db_flg'] = '1';

        $ret->_p['device_type'] = "1";
        $ret->_p['group_type'] = "1";
        $ret->_p['job_out'] = <<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;

        $this->assertEquals($method->invoke($ret,1,1),'');

        // case 5
        try {
            $ret->_p['job_out'] = '';
            $this->assertEquals($method->invoke($ret,1,1),'');
        }catch( Exception $e){
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

    }

    /**
     *  remove Dir
     */
    function removeDir( $dir ) {

        $cnt = 0;
        if(!is_dir($dir)){
            return;
        }
        $handle = opendir($dir);
        if (!$handle) {
            return ;
        }
        while (false !== ($item = readdir($handle))) {
            if ($item === "." || $item === "..") {
                continue;
            }
            $path = $dir . DIRECTORY_SEPARATOR . $item;
            if (is_dir($path)) {
                $cnt = $cnt + $this->removeDir($path);
            } else {
                chmod($path,0644);
                @unlink($path);
            }
        }
        closedir($handle);
        if (!@rmdir($dir)) {
            return ;
        }
    }

    /**
     *  After action
     */
    public function testAfterAction() {
        // after job
        $dir = neccsNal_Config::LOG_DIR . "/job";
        $this->removeDir($dir);
    }
}
