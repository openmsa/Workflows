<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-09 at 15:09:51.
 */
require_once dirname(__FILE__) . '/../Nal/api/Nal.php';

class neccsNal_validateTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var neccsNal_validate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) );
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
        if( !defined('VALI_DIR')) {
            define( 'VALI_DIR' , API_DIR . '/Stub/Nal/parameterCheck' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers neccsNal_validate::_execValidate
     * @todo   Implement testExecValidate().
     */
    public function testExecValidate()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $httpMethod             = 'post';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, '_execValidate' );
        $method->setAccessible( true );
        $this->assertContains("A file doesn't exist.", $method->invoke($ret,$param,$httpMethod));

        // case 2
        $param['scenario']       = 'node';
        $param['function_type']  = 'vfw';
        $param['IaaS_tenant_id'] = '1234';
        $httpMethod              = 'post';

        $this->assertEquals($method->invoke($ret,$param,$httpMethod),'');

        // case 3
        $param['scenario']      = 'node';
        $param['function_type'] = 'test';
        $httpMethod             = 'post';

        $this->assertContains("A json file couldn't be decoded.", $method->invoke($ret,$param,$httpMethod));

        // case 4
        $param['scenario']       = 'node';
        $param['function_type']  = 'vfw';
        $param['IaaS_tenant_id'] = '';
        $httpMethod              = 'post';

        $this->assertContains("Please input IaaS_tenant_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));

        // case 5
        $param['scenario']      = 'node';
        $param['function_type'] = 'case';
        $param['IaaS_tenant_id'] = '1234';
        $param['device_type']   = '5';
        $param['host_name']     = 'test';
        $httpMethod             = 'post';

        $this->assertEquals($method->invoke($ret,$param,$httpMethod),'');

        // case 6
        $param['scenario']      = 'node';
        $param['function_type'] = 'case';
        $param['device_type']   = '5';
        $param['host_name']     = '1234';
        $param['IaaS_tenant_id'] = '';
        $httpMethod             = 'post';

        $this->assertContains("Please check the format of host_name.|Please input IaaS_tenant_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));

        // case 7
        $param['scenario']      = 'node';
        $param['function_type'] = 'case2';
        $param['device_type']   = '5';
        $param['host_name']     = 'test';
        $param['IaaS_tenant_id'] = '';
        $httpMethod             = 'post';

        $this->assertContains("Please input IaaS_tenant_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));

        // case 8
        $param['scenario']      = 'node';
        $param['function_type'] = 'case3';
        $param['IaaS_tenant_id'] = '1234';
        $param['device_type']   = '5';
        $param['host_name']     = 'test';
        $httpMethod             = 'post';

        $this->assertEquals($method->invoke($ret,$param,$httpMethod),'');

        // case 9
        $param['function_type']          = 'pfwIPv6Add';
        $httpMethod                = 'put';

        $param['operation_id']           = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input operation_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 10
        $param['IaaS_tenant_id']         = '';
        $this->assertContains("Please input IaaS_tenant_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 11
        $param['IaaS_tenant_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_tenant_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 12
        $param['IaaS_tenant_name']         = '';
        $this->assertContains("Please input IaaS_tenant_name more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 13
        $param['IaaS_tenant_name']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_tenant_name within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 14
        $param['IaaS_region_id']         = '';
        $this->assertContains("Please input IaaS_region_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 15
        $param['IaaS_region_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_region_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 16
        $param['node_id']         = '';
        $this->assertContains("Please input node_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 17
        $param['node_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input node_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 18
        $param['apl_type']         = '';
        $this->assertContains("Please input apl_type more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 19
        $param['apl_type']         = '1234';
        $this->assertContains("Please input apl_type within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 20
        $param['apl_type']         = 'a';
        $this->assertContains("Please check the format of apl_type.", $method->invoke($ret,$param,$httpMethod));

        // case 21
        $param['type']         = '';
        $this->assertContains("Please input type more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 22
        $param['type']         = '1234';
        $this->assertContains("Please input type within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 23
        $param['type']         = 'a';
        $this->assertContains("Please check the format of type.", $method->invoke($ret,$param,$httpMethod));

        // case 24
        $param['device_type']         = '';
        $this->assertContains("Please input device_type more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 25
        $param['device_type']         = '1234';
        $this->assertContains("Please input device_type within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 26
        $param['device_type']         = 'a';
        $this->assertContains("Please check the format of device_type.", $method->invoke($ret,$param,$httpMethod));

        // case 27
        $param['port_id']         = '';
        $this->assertContains("Please input port_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 28
        $param['port_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input port_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 28
        $param['port_id']         = '';
        $this->assertContains("Please input port_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 29
        $param['port_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input port_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 30
        $param['IaaS_network_id']         = '';
        $this->assertContains("Please input IaaS_network_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 31
        $param['IaaS_network_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_network_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 32
        $param['IaaS_subnet_id']         = '';
        $this->assertContains("Please input IaaS_subnet_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 33
        $param['IaaS_subnet_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_subnet_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 34
        $param['ip_v6_pub_auto_set_flg']         = '';
        $this->assertContains("Please input ip_v6_pub_auto_set_flg more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 35
        $param['ip_v6_pub_auto_set_flg']         = '1234';
        $this->assertContains("Please input ip_v6_pub_auto_set_flg within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 36
        $param['ip_v6_pub_auto_set_flg']         = 'a';
        $this->assertContains("Please check the format of ip_v6_pub_auto_set_flg.", $method->invoke($ret,$param,$httpMethod));

        // case 37
        $param['ip_v6_ext_auto_set_flg']         = '';
        $this->assertContains("Please input ip_v6_ext_auto_set_flg more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 38
        $param['ip_v6_ext_auto_set_flg']         = '1234';
        $this->assertContains("Please input ip_v6_ext_auto_set_flg within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 39
        $param['ip_v6_ext_auto_set_flg']         = 'a';
        $this->assertContains("Please check the format of ip_v6_ext_auto_set_flg.", $method->invoke($ret,$param,$httpMethod));

        // case 40
        $param['ip_v6_pub_auto_set_flg']  = '0';
        $param['fixed_ip_v6_pub']         = '';
        $this->assertContains("Please enter the fixed_ip_v6_pub.", $method->invoke($ret,$param,$httpMethod));
        // case 41
        $param['fixed_ip_v6_pub']         = '123.4.5.6';
        $this->assertContains("Please check the format of fixed_ip_v6_pub.", $method->invoke($ret,$param,$httpMethod));

        // case 42
        $param['ip_v6_ext_auto_set_flg']  = '0';
        $param['fixed_ip_v6_ext']         = '';
        $this->assertContains("Please enter the fixed_ip_v6_ext.", $method->invoke($ret,$param,$httpMethod));
        // case 43
        $param['fixed_ip_v6_ext']         = '123.4.5.6';
        $this->assertContains("Please check the format of fixed_ip_v6_ext.", $method->invoke($ret,$param,$httpMethod));


        // case 44
        $param['function_type']          = 'plbIPv6Add';
        $httpMethod                = 'put';

        $param['operation_id']           = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input operation_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 45
        $param['IaaS_tenant_id']         = '';
        $this->assertContains("Please input IaaS_tenant_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 46
        $param['IaaS_tenant_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_tenant_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 47
        $param['IaaS_tenant_name']         = '';
        $this->assertContains("Please input IaaS_tenant_name more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 48
        $param['IaaS_tenant_name']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_tenant_name within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 49
        $param['IaaS_region_id']         = '';
        $this->assertContains("Please input IaaS_region_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 50
        $param['IaaS_region_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_region_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 51
        $param['node_id']         = '';
        $this->assertContains("Please input node_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 52
        $param['node_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input node_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 53
        $param['apl_type']         = '';
        $this->assertContains("Please input apl_type more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 54
        $param['apl_type']         = '1234';
        $this->assertContains("Please input apl_type within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 55
        $param['apl_type']         = 'a';
        $this->assertContains("Please check the format of apl_type.", $method->invoke($ret,$param,$httpMethod));

        // case 56
        $param['type']         = '';
        $this->assertContains("Please input type more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 57
        $param['type']         = '1234';
        $this->assertContains("Please input type within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 58
        $param['type']         = 'a';
        $this->assertContains("Please check the format of type.", $method->invoke($ret,$param,$httpMethod));

        // case 59
        $param['device_type']         = '';
        $this->assertContains("Please input device_type more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 60
        $param['device_type']         = '1234';
        $this->assertContains("Please input device_type within 2 character.", $method->invoke($ret,$param,$httpMethod));
        // case 61
        $param['device_type']         = 'a';
        $this->assertContains("Please check the format of device_type.", $method->invoke($ret,$param,$httpMethod));

        // case 62
        $param['port_id']         = '';
        $this->assertContains("Please input port_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 63
        $param['port_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input port_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 64
        $param['port_id']         = '';
        $this->assertContains("Please input port_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 65
        $param['port_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input port_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 66
        $param['IaaS_network_id']         = '';
        $this->assertContains("Please input IaaS_network_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 67
        $param['IaaS_network_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_network_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 68
        $param['IaaS_subnet_id']         = '';
        $this->assertContains("Please input IaaS_subnet_id more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 69
        $param['IaaS_subnet_id']         = '12341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234';
        $this->assertContains("Please input IaaS_subnet_id within 64 character.", $method->invoke($ret,$param,$httpMethod));

        // case 70
        $param['fw_ip_v6_address'] = '';
        $this->assertContains("Please input fw_ip_v6_address more than 1 character.", $method->invoke($ret,$param,$httpMethod));
        // case 71
        $param['fw_ip_v6_address']         = '123.4.5.6';
        $this->assertContains("Please check the format of fw_ip_v6_address.", $method->invoke($ret,$param,$httpMethod));

    }

    /**
     * @covers neccsNal_validate::rule
     * @todo   Implement testRule().
     */
    public function testRule()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['apl_type']      = 'あ';

        $vali['rule'] = 'number';
        $vali['param'] = 'apl_type';
        $vali['min'] = '1';
        $vali['max'] = '2';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'rule' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please check the format of apl_type.", $e->getMessage());
        }

        // case 2
        $param['apl_type']      = '1';
        $this->assertEquals($method->invoke($ret,$param,$vali),'');

        // case 3
        $param['ip_address'] = '';
        $vali = array();
        $vali['param'] = 'ip_address';
        $vali['min'] = '';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );

    }


    /**
     * @covers neccsNal_validate::required
     * @todo   Implement testRequired().
     */
    public function testRequired()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['node_id']       = '';
        $param['type']          = '2';
        $param['device_type']   = '3';

        $vali['param'] = 'node_id';
        $vali['require'] = array(
            '0' => array(
                'key'     => 'type',
                'pattern' => '/^[2]$/',
            ),
            '1' => array(
                'key'     => 'device_type',
                'pattern' => '/^[3]$/',
            ),
        );

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'required' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please enter the node_id.", $e->getMessage());
        }

        // case 2
        $param['node_id']       = '';
        $param['type']          = '1';
        $param['device_type']   = '3';

        $this->assertEquals($method->invoke($ret,$param,$vali),'');

        // case 3
        $param['node_id']       = '1234';
        $param['type']          = '2';
        $param['device_type']   = '3';

        $this->assertEquals($method->invoke($ret,$param,$vali),'');

        // case 4
        $param = array();
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['node_id']       = '';
        $param['type']          = '2';
        $param['device_type']   = '3';

        $vali = array();
        $vali['param'] = 'node_id';

        $this->assertEquals($method->invoke($ret,$param,$vali),'');

    }

    /**
     * @covers neccsNal_validate::min
     * @todo   Implement testMin().
     */
    public function testMin()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['apl_type']      = '12';

        $vali['param'] = 'apl_type';
        $vali['min'] = '3';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'min' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please input apl_type more than 3 character.", $e->getMessage());
        }

        // case 2
        $param['apl_type']      = '123';
        $this->assertEquals($method->invoke($ret,$param,$vali),'');

    }

    /**
     * @covers neccsNal_validate::max
     * @todo   Implement testMax().
     */
    public function testMax()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['node_id']      = '12345678901';

        $vali['param'] = 'node_id';
        $vali['max'] = '10';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'max' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please input node_id within 10 character.", $e->getMessage());
        }

        // case 2
        $param['node_id']      = '123';
        $this->assertEquals($method->invoke($ret,$param,$vali),'');

    }

    /**
     * @covers neccsNal_validate::number
     * @todo   Implement testNumber().
     */
    public function testNumber()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['type']          = 'あ';

        $vali['param']   = 'type';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'number' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please check the format of type.", $e->getMessage());
        }

        // case 2
        $param['type']      = '123';
        $this->assertEquals($method->invoke($ret,$param,$vali),'');

    }

    /**
     * @covers neccsNal_validate::alphabet
     * @todo   Implement testAlphabet().
     */
    public function testAlphabet()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['license']          = 'あ';

        $vali['param']   = 'license';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'alphabet' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please check the format of license.", $e->getMessage());
        }

        // case 2
        $param['license']          = '1234';

        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please check the format of license.", $e->getMessage());
        }

        // case 3
        $param['license']      = 'abc';
        $this->assertEquals($method->invoke($ret,$param,$vali),'');

    }

    /**
     * @covers neccsNal_validate::sign
     * @todo   Implement testSign().
     */
    public function testSign()
    {
        // case 1
        $param['scenario']      = 'node';
        $param['function_type'] = 'vlb';
        $param['test_sign']          = 'あ';

        $vali['param']   = 'test_sign';

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'sign' );
        $method->setAccessible( true );
        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please check the format of test_sign.", $e->getMessage());
        }

        // case 2
        $param['test_sign']          = 'ABC';

        try{
            $method->invoke($ret,$param,$vali);
        }catch( Exception $e){
            $this->assertContains("Please check the format of test_sign.", $e->getMessage());
        }

        // case 2
        $param['test_sign']      = '+-';
        $this->assertEquals($method->invoke($ret,$param,$vali),'');

    }

    /**
     * @covers neccsNal_validate::num_alpha
     * @todo   Implement testNum_alpha().
     */
    public function testNum_alpha() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'num_alpha' );
        $method->setAccessible( true );

        // case 1
        $param['num_alpha'] = 'a1!';
        $vali['param']   = 'num_alpha';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of num_alpha.", $e->getMessage() );
        }

        // case 2
        $param['num_alpha'] = 'a1';
        $vali['param']   = 'num_alpha';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );
    }

    /**
     * @covers neccsNal_validate::num_alpha_sign
     * @todo   Implement testNum_alpha_sign().
     */
    public function testNum_alpha_sign() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'num_alpha_sign' );
        $method->setAccessible( true );

        // case 1
        $param['num_alpha_sign'] = 'a1!あ';
        $vali['param']   = 'num_alpha_sign';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of num_alpha_sign.", $e->getMessage() );
        }

        // case 2
        $param['num_alpha_sign'] = 'a1!';
        $vali['param']   = 'num_alpha_sign';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );
    }

    /**
     * @covers neccsNal_validate::string
     * @todo   Implement testString().
     */
    public function testString() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'string' );
        $method->setAccessible( true );

        // case 1
        $param['string'] = '';
        $vali = array();
        $vali['param'] = 'string';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );
    }

    /**
     * @covers neccsNal_validate::match
     * @todo   Implement testMatch().
     */
    public function testMatch() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'match' );
        $method->setAccessible( true );

        // case 1
        $param['match'] = 'TEST';
        $vali['param']   = 'match';
        $vali['pattern'] = '/[a-z]/';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of match.", $e->getMessage() );
        }

        // case 2
        $param['match'] = 'test';
        $vali['param']   = 'match';
        $vali['pattern'] = '/[a-z]/';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );
    }

    /**
     * @covers neccsNal_validate::ip_address
     * @todo   Implement testIp_address().
     */
    public function testIp_address() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'ip_address' );
        $method->setAccessible( true );

        // case 1
        $param['ip_address'] = '192.168.0.0.1';
        $vali['param']   = 'ip_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of ip_address.", $e->getMessage() );
        }

        // case 2
        $param['ip_address'] = '192.168.0.1';
        $vali['param']   = 'ip_address';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );
    }

    /**
     * @covers neccsNal_validate::ip_address_ipv6
     * @todo   Implement testIp_address_ipv6().
     */
    public function testIp_address_ipv6() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'ip_address_ipv6' );
        $method->setAccessible( true );

        // case 1
        $param['ip_address'] = 'ABCD:EF01:2345:6789:ABCD:2345:6789';
        $vali['param']   = 'ip_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of ip_address.", $e->getMessage() );
        }

        // case 2
        $param['ip_address'] = 'ABCD:EF01:2345:6789:ABCD:EF01:2345:6789';
        $vali['param']   = 'ip_address';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );
    }

    /**
     * @covers neccsNal_validate::ip_address_ipv4v6
     * @todo   Implement testIp_address_ipv4v6().
     */
    public function testIp_address_ipv4v6() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'ip_address_ipv4v6' );
        $method->setAccessible( true );

        // case 1
        $param['ip_address'] = 'ABCD:EF01:2345:6789:ABCD:2345:6789';
        $vali['param']   = 'ip_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of ip_address.", $e->getMessage() );
        }

        // case 2
        $param['ip_address'] = 'ABCD:EF01:2345:6789:ABCD:EF01:2345:6789';
        $vali['param']   = 'ip_address';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );

        // case 3
        $param['ip_address'] = '192.168.0.0.1';
        $vali['param']   = 'ip_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of ip_address.", $e->getMessage() );
        }

        // case 4
        $param['ip_address'] = '192.168.0.1';
        $vali['param']   = 'ip_address';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );

    }

    /**
     * @covers neccsNal_validate::network_address
     * @todo   Implement testNetwork_address().
     */
    public function testNetwork_address() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, 'network_address' );
        $method->setAccessible( true );

        // case 1
        $param['network_address'] = '192.168.0.0/33';
        $vali['param']   = 'network_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of network_address.", $e->getMessage() );
        }

        // case 2
        $param['network_address'] = '192.168.0.0.1/24';
        $vali['param']   = 'network_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of network_address.", $e->getMessage() );
        }

        // case 3
        $param['network_address'] = '192.168.0.0/24';
        $vali['param']   = 'network_address';

        $this->assertEquals( $method->invoke( $ret, $param, $vali ),'' );

        // case 4
        $param['network_address'] = '192.168.0.24';
        $vali['param']   = 'network_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of network_address.", $e->getMessage() );
        }

        // case 5
        $param['network_address'] = '192.168.0.24/a';
        $vali['param']   = 'network_address';

        try {
            $method->invoke( $ret, $param, $vali );
        } catch( Exception $e ) {
            $this->assertContains( "Please check the format of network_address.", $e->getMessage() );
        }
    }

    /**
     * @covers neccsNal_validate::_caseCheckVali
     * @todo   Implement testCaseCheckVali().
     */
    public function testCaseCheckVali() {

        $ret = new neccsNal_validate();
        $method = new ReflectionMethod( $ret, '_caseCheckVali' );
        $method->setAccessible( true );

        // case 1
        $vali = array();
        $vali['param']   = 'host_name';
        $vali['case'] = array(
                            '0' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[123]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                            ),
                            '1' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[4]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                                 'min'  => '1',
                                 'max'  => '10',
                            ),
                         );
        $param['host_name'] = 'host1';
        $param['device_type'] = '1';

        $result = array();
        $result[0]['param'] =  'host_name';
        $result[0]['rule']    =  'MATCH';
        $result[0]['pattern'] = '/\D/';
        $result[0]['min']     = '';
        $result[0]['max']     = '';

        $this->assertEquals($method->invoke( $ret, $param, $vali ), $result);

        // case 2
        $vali = array();
        $vali['param']   = 'host_name';
        $vali['case'] = array(
                            '0' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[123]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                            ),
                            '1' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[4]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                                 'min'  => '1',
                                 'max'  => '10',
                            ),
                         );
        $param['host_name'] = 'host1';
        $param['device_type'] = '4';

        $result = array();
        $result[1]['param'] =  'host_name';
        $result[1]['rule'] =  'MATCH';
        $result[1]['pattern'] = '/\D/';
        $result[1]['min']     = '1';
        $result[1]['max']     = '10';

        $this->assertEquals($method->invoke( $ret, $param, $vali ), $result);

        // case 3
        $vali = array();
        $vali['param']   = 'host_name2';
        $vali['case'] = array(
                            '0' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[123]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                            ),
                            '1' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[4]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                                 'min'  => '1',
                                 'max'  => '10',
                            ),
                         );
        $vali['default'] = array(
                             'rule' => 'STRING',
                             'min'  => '5',
                             'max'  => '20',
                         );
        $param['host_name'] = 'host1';
        $param['device_type'] = '5';

        $result = array();
        $result[0]['param'] =  'host_name2';
        $result[0]['rule'] =  'STRING';
        $result[0]['min']     = '5';
        $result[0]['max']     = '20';

        $this->assertEquals($method->invoke( $ret, $param, $vali ), $result);

        // case 4
        $vali = array();
        $vali['param']   = 'host_name2';
        $vali['case'] = array(
                            '0' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[123]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                            ),
                            '1' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[4]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                                 'min'  => '1',
                                 'max'  => '10',
                            ),
                         );
        $vali['default'] = array(
                             'rule'    => 'MATCH',
                             'pattern' => '/^test$/',
                             'min'     => '5',
                             'max'     => '30',
                         );
        $param['host_name'] = 'host1';
        $param['device_type'] = '5';

        $result = array();
        $result[0]['param']   =  'host_name2';
        $result[0]['rule']    =  'MATCH';
        $result[0]['pattern'] =  '/^test$/';
        $result[0]['min']     = '5';
        $result[0]['max']     = '30';

        $this->assertEquals($method->invoke( $ret, $param, $vali ), $result);

        // case 5
        $vali = array();
        $vali['param']   = 'host_name2';
        $vali['case'] = array(
                            '0' => array(
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                            ),
                            '1' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[4]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                                 'min'  => '1',
                                 'max'  => '10',
                            ),
                         );

        $param['host_name'] = 'host1';
        $param['device_type'] = '5';

        $result = array();

        $this->assertEquals($method->invoke( $ret, $param, $vali ), $result);

        // case 6
        $vali = array();
        $vali['param']   = 'host_name2';
        $vali['case'] = array(
                            '0' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[1234]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                            ),
                            '1' => array(
                                 'case_param' => array(
                                     'case_key'   => 'device_type',
                                     'case_pattern' => '/^[4]$/'
                                 ),
                                 'rule' => 'MATCH',
                                 'pattern' => '/\\D/',
                                 'min'  => '1',
                                 'max'  => '10',
                            ),
                         );
        $vali['default'] = array(
                             'rule'    => 'MATCH',
                             'pattern' => '/^test$/',
                             'min'     => '5',
                             'max'     => '30',
                         );
        $param['host_name'] = 'host1';
        $param['device_type'] = '4';

        $result = array();
        $result[0]['param']   = 'host_name2';
        $result[0]['rule']    = 'MATCH';
        $result[0]['pattern'] = '/\D/';
        $result[0]['min']     = '';
        $result[0]['max']     = '';
        $result[1]['param']   = 'host_name2';
        $result[1]['rule']    = 'MATCH';
        $result[1]['pattern'] = '/\D/';
        $result[1]['min']     = '1';
        $result[1]['max']     = '10';

        $this->assertEquals($method->invoke( $ret, $param, $vali ), $result);


    }

}
