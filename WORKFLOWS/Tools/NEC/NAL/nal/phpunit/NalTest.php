<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-07 at 12:28:06.
 */
require_once dirname(__FILE__) . '/../Nal/api/Nal.php';
require_once dirname(__FILE__) . '/../Nal/api/Nal/Config.php';
require_once dirname(__FILE__) . '/Stub/NalStb.php';

class neccsNalTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var neccsNal
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     *  remove Dir
     */
    function removeDir( $dir ) {

        $cnt = 0;
        if(!is_dir($dir)){
            return;
        }
        $handle = opendir($dir);
        if (!$handle) {
            return ;
        }
        while (false !== ($item = readdir($handle))) {
            if ($item === "." || $item === "..") {
                continue;
            }
            $path = $dir . DIRECTORY_SEPARATOR . $item;
            if (is_dir($path)) {
                $cnt = $cnt + $this->removeDir($path);
            } else {
                chmod($path,0644);
                @unlink($path);
            }
        }
        closedir($handle);
        if (!@rmdir($dir)) {
            return ;
        }
    }

    /**
     * Before Action
     */
    public function testBeforeAction() {
        // before job
        $dir = neccsNal_Config::LOG_DIR . "/job";
        $this->removeDir($dir);
    }

    /**
     * @covers neccsNal::__construct
     * @todo   Implement __construct().
     */
    public function testConstruct() {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vport';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $obj = new neccsNal();
        $this->assertTrue($obj instanceof neccsNal) ;
    }

    /**
     * @covers neccsNal::getInParam
     * @todo   Implement getInParam().
     */
    public function testGetInParam() {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $param['function_type'] = 'vfw';
        $param['scenario'] = 'node';

        $ret = new neccsNal( $param );
        $ret->getInParam();
        $this->assertArrayHasKey('delete_flg', $ret->_p);

        // case 2
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $param['function_type'] = 'dcconnect';
        $param['scenario'] = 'service';

        $ret = new neccsNal( $param );
        $ret->getInParam();
        $this->assertArrayHasKey('create_id', $ret->_p);
        $this->assertArrayHasKey('update_id', $ret->_p);
        $this->assertArrayHasKey('dc_id', $ret->_p);

        // case 3
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $param['function_type'] = 'dcconnect';
        $param['scenario'] = 'service';

        $ret = new neccsNal( $param );
        $ret->getInParam();
        $this->assertArrayHasKey('update_id', $ret->_p);
        $this->assertArrayHasKey('dc_id', $ret->_p);

        // case 4
        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $param['function_type'] = 'dcconnect';
        $param['scenario'] = 'service';

        $ret = new neccsNal( $param );
        $ret->getInParam();
        $this->assertArrayHasKey('update_id', $ret->_p);
        $this->assertArrayHasKey('delete_flg', $ret->_p);
        $this->assertArrayHasKey('dc_id', $ret->_p);



    }


    /**
     * @covers neccsNal::getInstance
     * @todo   Implement testGetInstance().
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testGetInstance()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_SERVER['REQUEST_URI'] = "/test/test/TEST";
        /*
         $class = $this->getMockClass('neccsNal', array('fatalError'));
        $class::staticExpects($this->any())
        ->method('fatalError')
        ->will($this->returnArgument(0));
        */
        try {
            neccsNal::getInstance('/test/');
        }catch( Exception $e) {
            $this->assertEquals($e->getMessage(), 'This function can not be used. (test)');
        }

        // case2
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'TEST';
        $_SERVER['REQUEST_URI'] = "/test/node/TEST/";
        try {
            neccsNal::getInstance('/test/');
        }catch( Exception $e) {
            $this->assertEquals($e->getMessage(), 'This class can not be used. (node : TEST)');
        }

        // case3
        $_SERVER['REQUEST_METHOD'] = 'TEST';
        $post = array();
        $post['function_type'] = 'vfw';
        $_SERVER['REQUEST_URI'] = "/test/node/TEST/";
        /** TODO php://input */
        $_POST   = $post;
        try {
            neccsNal::getInstance('/test/');
        } catch ( Exception $e ) {
            $this->assertEquals($e->getMessage(), 'This class can not be used. (node : vfw : TEST)');
        }

        // case4
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vfw';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            neccsNal::getInstance('/test/');
        } catch ( Exception $e ) {
            $this->assertEquals($e->getMessage(), 'not found class: vfw');
        }

        // case5
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  vlb );
        }catch( Exception $e ) {
            $this->fail('case6 ' . $e->getMessage());
        }

        // case6
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vport';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  neccsNal );
        }catch( Exception $e ) {
            $this->fail('case7 ' . $e->getMessage());
        }

        // case7
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'vfwIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  neccsNal );
        }catch( Exception $e ) {
            $this->fail('case7 ' . $e->getMessage());
        }

        // case8
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'vlbIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  neccsNal );
        }catch( Exception $e ) {
            $this->fail('case7 ' . $e->getMessage());
        }

        // case9
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'serviceIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  neccsNal );
        }catch( Exception $e ) {
            $this->fail('case7 ' . $e->getMessage());
        }

        // case10
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'serviceIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        try {
            neccsNal::getInstance('/test/');
        } catch ( Exception $e ) {
            $this->assertEquals($e->getMessage(), 'This class can not be used. (service : serviceIPv6Add : POST)');
        }

        // case11
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'pfwIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  neccsNal );
        }catch( Exception $e ) {
            $this->fail('case7 ' . $e->getMessage());
        }

        // case12
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'plbIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            $ret = neccsNal::getInstance('/test/');
            $this->assertTrue($ret instanceof  neccsNal );
        }catch( Exception $e ) {
            $this->fail('case7 ' . $e->getMessage());
        }

        // case10
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'pfwIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            neccsNal::getInstance('/test/');
        } catch ( Exception $e ) {
            $this->assertEquals($e->getMessage(), 'This class can not be used. (node : pfwIPv6Add : POST)');
        }

        // case10
        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $_POST['function_type'] = 'pfwIPv6Add';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        try {
            neccsNal::getInstance('/test/');
        } catch ( Exception $e ) {
            $this->assertEquals($e->getMessage(), 'This class can not be used. (node : pfwIPv6Add : DELETE)');
        }

    }

    /**
     * @covers neccsNal::fatalError
     * @todo   Implement testFatalError().
     */
    public function testFatalError()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        try {
            neccsNal::fatalError(neccsNal_Config::API_INTERNAL_ERROR,'test');
        }catch( Exception $e) {
            $this->assertEquals($e->getMessage(), 'test');
        }
    }

    /**
     * @covers neccsNal::run
     * @todo   Implement testRun().
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testRun()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/resource/";

        // case 1
        try {
            $ret = neccsNal::getInstance();
            $ret->run();
        }catch( Exception $e ) {
            //$this->assertContains('API error',$e->getMessage());
        }

        // case 2
        try {
            $_SERVER['REQUEST_METHOD'] = 'TEST';
            $_POST['function_type']   = 'globalip';
            $ret = new neccsNal();
            $ret->run();
        }catch( Exception $e ) {
            $this->assertContains('not found method: TEST',$e->getMessage());
        }

        //  case3 get mock
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $stb = $this->getMock('neccsNal',array('get'));
        $stb->expects($this->any())->method('get')->will($this->returnArgument(0));
        $this->assertEquals( $stb->run(),'');
    }

    /**
     * @covers neccsNal::getNalConfFile
     * @todo   Implement testGetNalConfFile().
     */
    public function testGetNalConfFile(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'getNalConfFile');
        $method->setAccessible(true);

        // case 1
        $this->assertArrayHasKey('root_inoutfile',$method->invoke($ret));

    }

    /**
     * @covers neccsNal::getRequestParam
     * @todo   Implement testGetRequestParam().
     */
    public function testGetRequestParam(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['node_id'] = '1234';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'getRequestParam');
        $method->setAccessible(true);

        $this->assertArrayHasKey('node_id',$method->invoke($ret));


        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['node_id'] = '1234';
        $param['function_type'] = 'vfw';
        $param['scenario'] = 'node';

        $ret = new neccsNal( $param );
        $method = new ReflectionMethod($ret, 'getRequestParam');
        $method->setAccessible(true);

        $this->assertArrayHasKey('node_id',$method->invoke($ret));

    }

    /**
     * @covers neccsNal::_requestId
     * @todo   Implement testRequestId().
     */
    public function testRequestId(){

        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['node_id'] = '1234';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_requestId');
        $method->setAccessible(true);

        $this->assertNotEmpty( $method->invoke($ret));

    }

    /**
     * @covers neccsNal::get
     * @todo   Implement testGet().
     */
    public function testGet(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'globalip';
        $_SERVER['REQUEST_URI'] = "/test/resource/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'get');
        $method->setAccessible(true);

        //case 1 ( error )
        try {
            $method->invoke($ret);
        }catch( Exception $e ) {
            //$this->assertContains('API error',$e->getMessage());
        }

        //case 2 (success)
        try {
            // mock
            $stb = $this->getMock('neccsNal',array('_execApi'));
            $stb->expects($this->any())->method('_execApi')->will($this->returnArgument(0));
            $method->invoke($stb);
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }

        //  case3 response mock
        $stb = $this->getMock('neccsNal',array('_execApi','_response'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_execApi')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');
    }

    /**
     * @covers neccsNal::post
     * @todo   Implement testPost().
     */
    public function testPost()
    {
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['device_type'] = '1';
        $_POST['scenario'] = 'node';

        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'post');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('execJob'));
        $stb->expects($this->any())->method('execJob')->will($this->returnArgument(0));

        //case 1
        try {
            $method->invoke($stb);
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }

        //  case2 response mock
        $stb = $this->getMock('neccsNal',array('_response','execJob'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('execJob')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');
    }
    /**
     * @covers neccsNal::put
     * @todo   Implement testPut().
     */
    public function testPut()
    {
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'vfw_port_p';
        $_POST['device_type'] = '1';
        $_POST['scenario'] = 'node';

        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'put');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('execJob'));
        $stb->expects($this->any())->method('execJob')->will($this->returnArgument(0));

        //case 1
        try {
            $method->invoke($stb);
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }
        //  case2 response mock
        $stb = $this->getMock('neccsNal',array('_response','execJob'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('execJob')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

    }
    /**
     * @covers neccsNal::delete
     * @todo   Implement testDelete().
     */
    public function testDelete()
    {
        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $_POST['function_type'] = 'vlb';
        $_POST['device_type'] = '1';
        $_POST['scenario'] = 'node';

        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'delete');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('execJob'));
        $stb->expects($this->any())->method('execJob')->will($this->returnArgument(0));

        //case 1
        try {
            $method->invoke($stb);
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }
        //  case2 response mock
        $stb = $this->getMock('neccsNal',array('_response','execJob'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('execJob')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');
    }

    /**
     * @covers neccsNal::success
     * @todo   Implement testSuccess().
     */
    public function testSuccess()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'success');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('callJobCenter'));
        $stb->expects($this->any())->method('callJobCenter')->will($this->returnArgument(0));

        //case 1
        try {
            $method->invoke($ret);
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }

        //case 2 (arg)
        try {
            $method->invoke($ret, array('test' => '123456'));
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }

        //case 3 (instance variable )
        try {
            $ret->_jobId ='12345';
            $ret->_callApiType ='12345';
            $method->invoke($ret, array('test' => '123456'));
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'');
        }

        //  case4 response mock
        $stb = $this->getMock('neccsNal',array('_response'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $stb->_jobId          ='12345';
        $stb->_callApiType ='12345';
        $this->assertEquals( $method->invoke($stb),'');
    }

    /**
     * @covers neccsNal::error
     * @todo   Implement testError().
     */
    public function testError()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'error');
        $method->setAccessible(true);

        //case 1
        try {
            $method->invoke($ret, neccsNal_Config::API_INTERNAL_ERROR, 'TEST');
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'TEST');
        }
        //case 2
        try {
            $method->invoke($ret, neccsNal_Config::API_INTERNAL_ERROR, 'TEST');
        }catch( Exception $e ) {
            $this->assertEquals($e->getMessage(),'TEST');
        }

        //  case3 response mock
        $stb = $this->getMock('neccsNal',array('_response'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb, neccsNal_Config::API_INTERNAL_ERROR, 'TEST'),'');
    }

    /**
     * @covers neccsNal::_response
     * @todo   Implement Response().
     */
    public function testResponse()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_response');
        $method->setAccessible(true);

        // case 1
        $ret->_childProcessFlg = '0';
        try {
            $method->invoke($ret,array('result' => array('message' => 'TEST')));
        }catch( Exception $e) {
            $this->assertContains('TEST',$e->getMessage());
        }

        // case 2 child proccessing
        $ret->_childProcessFlg = '1';
        try {
            $method->invoke($ret,array('result' => array('message' => 'TEST2')));
        }catch( Exception $e) {
            $this->assertContains('TEST2',$e->getMessage());
        }
    }
    /**
     * @covers neccsNal::logit
     * @todo   Implement Logit().
     */
    public function testLogit()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNalStb();
        $method = new ReflectionMethod($ret, 'logit');
        $method->setAccessible(true);

        // case 1
        $file =  neccsNal_Config::LOG_DIR . neccsNal_Config::$logFileName[neccsNal_Config::LEV_INFO];
        if( is_file($file)) {
            chmod($file, 0644);
            @unlink($file);
        }
        $method->invoke($ret,neccsNal_Config::API_INTERNAL_ERROR);
        $this->assertFileExists($file);

        // case2
        try {
            $fd = fopen( $file , "w");
            fwrite($fd, "TEST");
            fclose($fd);
            chmod($file, 0000);
            $method->invoke($ret,neccsNal_Config::API_INTERNAL_ERROR);
        } catch(Exception $e) {
            $this->assertContains('file was not opened.',$e->getMessage());
            chmod($file, 0644);
            @unlink($file);
        }
        if (file_exists($file)) {
            chmod($file, 0644);
            @unlink($file);
        }
    }

    /**
     * @covers neccsNal::makeNalFile
     * @todo   Implement MakeNalFile().
     */
    public function testMakeNalFile()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        $this->assertEquals($method->invoke($ret),'');

        // case 2
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $ret->_p['request-id'] = '123456';
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 3
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'license';
        $_POST['device_type'] = '1';
        $_POST['type'] = '1';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        $this->assertEquals($method->invoke($ret),'');

        // case 4
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['device_type'] = '1';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $ret->_p['request-id'] = '123456';
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        $this->assertEquals($method->invoke($ret),'');

        // case 5
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['TEST1'] = array('abc' => '1');
        $_POST['TEST2'] = 'abcdefg';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $ret->_p['request-id'] = '123456';
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        $this->assertEquals($method->invoke($ret),'');

        // case 6
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconnect';
        $_POST['service_type'] = '1';
        $_POST['device_type'] = '1';
        $_POST['scenario']      = 'service';
        $ret = new neccsNal();
        $ret->_p['request-id'] = '123456';
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        $this->assertEquals($method->invoke($ret),'');

        // case 7
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconnect';
        $_POST['group_type'] = '1';
        $_POST['device_type'] = '1';
        $_POST['scenario']      = 'service';
        $ret = new neccsNal();
        $ret->_p['request-id'] = '123456';
        $method = new ReflectionMethod($ret, 'makeNalFile');
        $method->setAccessible(true);
        $this->assertEquals($method->invoke($ret),'');

        // case8
        $trans = array(
                        '%ROOT_DIR%' => $ret->_nalConf['root_inoutfile'],
                        '%UUID%'     => $ret->_p['request-id'],
        );
        $dir = strtr( neccsNal_Config::DIR_PATH, $trans );
        $method->invoke($ret);
        $infile = $dir . "/" .  neccsNal_Config::IN_FILE;
        $outfile = $dir . "/" .  neccsNal_Config::OUT_FILE;
        $this->assertFileExists($infile);
        $this->assertFileExists($outfile);

        // after action
        $this->removeDir($dir);
    }

    /**
     * @covers neccsNal::makeOperation
     * @todo   Implement MakeOperation().
     */
    public function testMakeOperation()
    {

        $param = array(
                        array('GET','node','vlb', 'get-vlb-info'),
                        array('GET','node','all', 'get-all-info'),
                        array('POST','node','vlb','create-vlb'),
                        array('PUT','node','license','auth-license'),
                        array('PUT','node','vfw_port_p','create-vport'),
                        array('PUT','node','pfw_port_d','delete-pport'),
                        array('PUT','service','dcconnect','update-dcconnect'),
                        array('DELETE','node','vlb','delete-vlb'),
        );

        // case 1
        foreach( $param as $array )  {
            $_SERVER['REQUEST_METHOD'] = $array[0];
            $_GET['scenario'] = $array[1];
            $_POST['scenario'] = $array[1];
            $_GET['function_type'] = $array[2];
            $_POST['function_type'] = $array[2];
            $_SERVER['REQUEST_URI'] = "/test/node/";
            $ret = new neccsNal();
            $method = new ReflectionMethod($ret, 'makeOperation');
            $method->setAccessible(true);
            $this->assertEquals($method->invoke($ret),$array[3]);
        }

        // case 2
        try {
            $_SERVER['REQUEST_METHOD'] = 'TEST';
            $_POST['function_type'] = 'TEST';
            $_POST['operation-type'] = 'TEST';
            $_SERVER['REQUEST_URI'] = "/test/node/";
            $ret = new neccsNal();
            $method = new ReflectionMethod($ret, 'makeOperation');
            $method->setAccessible(true);
            $method->invoke($ret);
        }catch(Exception $e) {
            $this->assertEquals($e->getMessage(),'operation is unclear');
        }

        // case 3
        $this->assertEquals($method->invoke($ret,'1'),'');

        // case 4
        $stb = $this->getMock('neccsNal',array('_response'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $this->assertEquals($method->invoke($stb),'');
    }
    /**
     * @covers neccsNal::callJobCenter
     * @todo   Implement CallJobCenter().
     */
    public function testCallJobCenter()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['scenario']      = 'node';
        $ret = new neccsNal();

        // job param
        $ret->_p['request-id'] = '123456';
        $trans = array(
                        '%ROOT_DIR%' => $ret->_nalConf['root_inoutfile'],
                        '%UUID%'     => $ret->_p['request-id'],
        );
        $dir = strtr( neccsNal_Config::DIR_PATH, $trans );
        $ret->jobCenterParam      ="'" . $dir . " " . neccsNal_Config::IN_FILE . " " . neccsNal_Config::OUT_FILE . "'";
        $ret->jobCenterOperation = "create-vlb";
        $method = new ReflectionMethod($ret, 'callJobCenter');
        $method->setAccessible(true);

        // case 1
        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:create-vlb.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret),'');

        // case 3
        try {
            $ret->_p['job_out'] = '';
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

        // case 4
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'license';
        $_POST['scenario']      = 'node';
        $_POST['type']      = 'node';
        $ret = new neccsNal();

        // job param
        $ret->_p['request-id'] = '123456';
        $trans = array(
        '%ROOT_DIR%' => $ret->_nalConf['root_inoutfile'],
        '%UUID%'     => $ret->_p['request-id'],
        );
        $dir = strtr( neccsNal_Config::DIR_PATH, $trans );
        $ret->jobCenterParam      ="'" . $dir . " " . neccsNal_Config::IN_FILE . " " . neccsNal_Config::OUT_FILE . "'";
        $ret->jobCenterOperation = "create-vlb";
        $method = new ReflectionMethod($ret, 'callJobCenter');
        $method->setAccessible(true);

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['job_out'] = "jc-sv01:nsumsmgr:auth-license.20160706040616.nstrk";
        $this->assertEquals($method->invoke($ret),'');
    }

    /**
     * @covers neccsNal::_setOutParam
     * @todo   Implement SetOutParam().
     */
    public function testSetOutParam()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_setOutParam');
        $method->setAccessible(true);

        // case 1
        $this->assertEquals($method->invoke($ret),array());

        // case 2 ( filepath )
        $tempdir               = neccsNal_Config::LOG_DIR . "temp_phpunit";
        if( !is_dir($tempdir) ) {
            mkdir($tempdir);
        }
        $ret->fileDirPath  =  $tempdir;
        $this->assertEquals($method->invoke($ret),array());

        // case 3 ( request-id )
        $ret->fileDirPath  =  null;
        $ret->_p['request-id']  =  '123456';
        $this->assertEquals($method->invoke($ret),array());

        // case 3 ( request-id )
        $ret->fileDirPath  =  null;
        $ret->_p['request-id']  =  null;
        $this->assertEquals($method->invoke($ret),array());

        // case4
        $outfile = $tempdir . "/" .  neccsNal_Config::OUT_FILE;
        $fd = fopen( $outfile, "w");
        fwrite($fd, 'TEST');
        fclose($fd);
        chmod($outfile, 0000);
        $ret->fileDirPath  =  $tempdir;
        try {
            $method->invoke($ret);
        } catch( Exception $e ){
            $this->assertContains('file no contents. ',$e->getMessage());
            chmod($outfile, 0644);
            @unlink($outfile);
        }

        // case5 ( response mock )
        $stb = $this->getMock('neccsNal',array('error'));
        $stb->expects($this->any())->method('error')->will($this->returnArgument(0));
        $outfile = $tempdir . "/" .  neccsNal_Config::OUT_FILE;
        $fd = fopen( $outfile, "w");
        fwrite($fd, 'TEST');
        fclose($fd);
        $stb->fileDirPath  =  $tempdir;
        $this->assertEquals($method->invoke($stb),'');
        chmod($outfile, 0644);
        @unlink($outfile);

        // case6
        $outfile = $tempdir . "/" .  neccsNal_Config::OUT_FILE;
        $fd = fopen( $outfile, "w");
        fwrite($fd, json_encode(array('data' => 'test')));
        fclose($fd);
        $ret->fileDirPath  =  $tempdir;
        $this->assertEquals($method->invoke($ret),'test');
        @unlink($outfile);
        @rmdir($tempdir);
    }

    /**
     * @covers neccsNal::_getTenant
     * @todo   Implement GetTenant().
     */
    public function testGetTenant()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_getTenant');
        $method->setAccessible(true);

        // case 1
        $stb = $this->getMock('neccsNal',array('_execApiHttpMethod'));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnArgument(0));
        $this->assertEquals($method->invoke($stb,'123456'),'');

        // case 2
        $stb = $this->getMock('neccsNal',array('_execApiHttpMethod'));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array(array('tenant_name'=>'123456'))));
        $this->assertEquals($method->invoke($stb,'123456'),'123456');
    }

    /**
     * @covers neccsNal::_setUrl
     * @todo   Implement SetUrl().
     */
    public function testSetUrl()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'globalip';
        $_GET['globalip'] = '168.196.4.1';
        $_SERVER['REQUEST_URI'] = "/test/resource/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);
        $this->assertContains('/rest/api/index.py/global-ip-addresses?globalip=168.196.4.1&delete_flg=0',$method->invoke($ret));

        // case 2
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'pfw';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);
        $this->assertContains('/rest/api/index.py/ports',$method->invoke($ret));

        // case 3
        $_SERVER['REQUEST_METHOD'] = 'GET';
        unset($_GET);
        $_GET['function_type'] = 'all_node';
        $_GET['test1'] = '1';
        $_GET['test2'] = '2';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);
        $this->assertContains('/rest/api/index.py/appliances?test1=1&test2=2&delete_flg=0',$method->invoke($ret));

        // case 4
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'pnf';
        $_GET['test1'] = '1';
        unset($_GET['test2'] );
        $_GET['IaaS_tenant_id'] = '2';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);
        $stb = $this->getMock('neccsNal',array('_getTenant'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnValue('12345'));
        $this->assertContains('/rest/api/index.py/appliances?test1=1&tenant_name=12345&delete_flg=0',$method->invoke($stb));

        // case 6
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'globalip';
        $_POST['id'] = '12345';
        $_SERVER['REQUEST_URI'] = "/test/resource/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);
        $this->assertContains('/global-ip-addresses/12345',$method->invoke($ret));

        // case 7
        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $_POST['function_type'] = 'license';
        $_POST['id'] = '54321';
        $_SERVER['REQUEST_URI'] = "/test/resource/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);
        $this->assertContains('/licenses/54321',$method->invoke($ret));

        // case 8
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pfw';
        $_GET['scenario']          = 'node';
        $_GET['IaaS_tenant_id']    = '1234';
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_setUrl');
        $method->setAccessible(true);

        $stb = $this->getMock('neccsNal',array('_getTenant'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnValue(''));

        try {
            $method->invoke($stb);
        }catch( Exception $e) {
            $this->assertEquals('',$e->getMessage());
        }

    }

    /**
     * @covers neccsNal::_execApi
     * @todo   Implement ExecApi().
     */
    public function testExecApi()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        // case 1
        $url = 'http://127.0.0.1/nalapi/test.html';
        $method = new ReflectionMethod($ret, '_execApi');
        $method->setAccessible(true);
        try {
            $method->invoke($ret,$url,array(),1);
        }catch( Exception $e) {
            $this->assertContains('API error',$e->getMessage());
        }

        // case 2
        $stb = $this->getMock('neccsNal',array('error'));
        $stb->expects($this->any())->method('error')->will($this->returnValue('error'));
        $this->assertEquals($method->invoke($stb,$url,array(),1),null);

        // case 3 ( get )
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1));

        // case 4 ( post )
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1));

        // case 5 ( put )
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'pfw_port_d';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1));

        // case6 ( delete )
        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $_POST['function_type'] = 'vlb';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApi');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1));

    }

    /**
     * @covers neccsNal::callJobScheduler
     * @todo   Implement CallJobScheduler().
     */
    public function testCallJobScheduler()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        // case 1
        $method = new ReflectionMethod($ret, 'callJobScheduler');
        $method->setAccessible(true);

        try {
            $this->assertEquals($method->invoke($ret),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = "1";
        $ret->_p['scenario'] = 'node';
        $ret->jobCenterOperation = 'create-vfw';
        $method = new ReflectionMethod($ret, 'callJobScheduler');
        $method->setAccessible(true);
        try {
            $method->invoke($ret);
        }catch( Exception $e) {
            $this->assertContains('Out params was not returned.',$e->getMessage());
        }

        // case 2
        $ret->_p['job_out'] =<<<  STR
<?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
<answer time="2016-07-07T12:38:01.117Z">
<ok>
<order created="2016-07-07T12:38:01.119Z"
id="75"
initial_state="01"
job="/test03/job01"
job_chain="/test03/job_chainA"
order="75"
path="/"
priority="0"
state="01">
<file_based state="not_initialized">
<requisites/>
</file_based>
</order>
</ok>
</answer>
</spooler>
STR;

        $method->invoke($ret);
        $this->assertEquals($ret->_p['job-id'],'75');
        $flg = ($ret->_p['request-id']) ? true : false;
        $this->assertTrue($flg);
    }

    /**
     * @covers neccsNal::makeParamterFile
     * @todo   Implement MakeParamterFile().
     */
    public function testMakeParamterFile()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        // case 1
        try {
            $this->assertEquals($method->invoke($ret,1),'');
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'device_type is not set.');
        }

        // case 2
        $ret->_p['device_type'] = '1';
        $ret->_p['request-id'] = '123456';
        $ret->_p['scenario'] = 'node';
        $ret->jobCenterOperation = 'create-vfw';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 3
        $ret->_jobId = '123456';
        $file = $method->invoke($ret,2);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 4
        $ret->_nalConf['api_type'] = 'wim';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 5
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type']    = 'license';
        $_POST['scenario']         = 'node';
        $_POST['device_type']      = '1';
        $_POST['type']             = '2';
        $ret = new neccsNal();

        $ret->jobCenterOperation = 'auth-license';
        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 6
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconnect';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '2';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $ret->jobCenterOperation = 'create-dcconnect';
        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 7
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'bandwidth';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '3';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $ret->jobCenterOperation = 'update-bandwidth';
        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 8
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'serviceSetting';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '4';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $ret->jobCenterOperation = 'update-serviceSetting';
        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 9
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'serviceIPv6Add';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '2';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $ret->jobCenterOperation = 'update-serviceIPv6Add';
        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 10
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST = array();
        $_POST['function_type'] = 'serviceIPv6Add';
        $_POST['device_type']   = '2';
        $_POST['group_type']    = '2';
        $_POST['scenario']      = 'service';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $ret->jobCenterOperation = 'update-serviceIPv6Add';
        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 11
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconnect';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '2';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $ret->_nalConf['api_type'] = 'wim';
        $ret->jobCenterOperation = 'create-dcconnect';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 12
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'bandwidth';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '3';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $ret->_nalConf['api_type'] = 'wim';
        $ret->jobCenterOperation = 'update-bandwidth';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 13
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'serviceSetting';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '4';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $ret->_nalConf['api_type'] = 'wim';
        $ret->jobCenterOperation = 'update-serviceSetting';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 14
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'serviceIPv6Add';
        $_POST['device_type']      = '2';
        $_POST['service_type']  = '2';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $ret->_nalConf['api_type'] = 'wim';
        $ret->jobCenterOperation = 'update-serviceIPv6Add';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );

        // case 15
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST = array();
        $_POST['function_type'] = 'serviceIPv6Add';
        $_POST['device_type']      = '2';
        $_POST['group_type']  = '2';
        $_POST['scenario']      = 'service';
        $_SERVER['REQUEST_URI'] = "/test/service/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeParamterFile');
        $method->setAccessible(true);

        $ret->_nalConf['api_type'] = 'wim';
        $ret->jobCenterOperation = 'update-serviceIPv6Add';
        $file = $method->invoke($ret,1);
        $dir  = dirname( $file );
        $this->assertContains('in.xml',$file);
        @unlink($file);
        @rmdir( $dir );
    }

    /**
     * @covers neccsNal::execJob
     * @todo   Implement ExecJob().
     */
    public function testExecJob()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'execJob');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('callJobScheduler','callJobCenter'));
        $stb->expects($this->any())->method('callJobScheduler')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('callJobCenter')->will($this->returnArgument(0));

        // case 1
        $stb->_nalConf['job_type'] = '1';
        $this->assertEquals($method->invoke($stb),'');

        // case 2
        $stb->_nalConf['job_type'] = '2';
        $this->assertEquals($method->invoke($stb),'');
    }

    /**
     * @covers neccsNal::execCheckJob
     * @todo   Implement ExecCheckJob().
     */
    public function testExecCheckJob()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'execCheckJob');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('checkJobScheduler','checkJobCenter'));
        $stb->expects($this->any())->method('checkJobScheduler')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('checkJobCenter')->will($this->returnArgument(0));

        // case 1
        $stb->_nalConf['job_type'] = '1';
        $this->assertEquals($method->invoke($stb,1,1),'');

        // case 2
        $stb->_nalConf['job_type'] = '2';
        $this->assertEquals($method->invoke($stb,1,1),'');
    }

    /**
     * @covers neccsNal::childProcessExec
     * @todo   Implement ChildProcessExec().
     */
    public function testChildProcessExec()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'childProcessExec');
        $method->setAccessible(true);

        // mock
        $stb = $this->getMock('neccsNal',array('makeChildProcessParam'));
        $stb->expects($this->any())->method('makeChildProcessParam')->will($this->returnArgument(0));

        // case 1
        $this->assertEquals($method->invoke($stb),'');
    }

    /**
     * @covers neccsNal::makeChildProcessParam
     * @todo   Implement MakeChildProcessParam().
     */
    public function testMakeChildProcessParam()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, 'makeChildProcessParam');
        $method->setAccessible(true);

        // case 1
        // $this->assertEquals($method->invoke($ret),array());

        // case 2 ( filepath )
        $tempdir               = neccsNal_Config::LOG_DIR . "/" . "temp_phpunit"  ;
        if( !is_dir($tempdir) ) {
            mkdir($tempdir);
        }
        $ret->fileDirPath  =  $tempdir;
        $ret->jobCenterOperation = 'create-vfw';
        $ret->_p['scenario'] = 'node';
        $method->invoke($ret);
        $file = $ret->fileDirPath . '/' . neccsNal_Config::CHILD_PROCESS_FILE;
        $this->assertFileExists($file);
        @unlink($file);
        @rmdir($tempdir);

        // case 3 ( request-id )
        $ret->fileDirPath  =  null;
        $ret->_p['request-id'] = '123456';
        $trans = array(
                        '%ROOT_DIR%' => $ret->_nalConf['root_inoutfile'],
                        '%UUID%'     => $ret->_p['request-id'],
        );
        $dir = strtr( neccsNal_Config::DIR_PATH, $trans );
        if( !is_dir($dir) ) {
            mkdir($dir);
        }
        $file = $dir . '/' . neccsNal_Config::CHILD_PROCESS_FILE;
        $method->invoke($ret);
        $this->assertFileExists($file);

        // case 4 ( error permmsion)
        chmod($file,0000);
        try {
            $method->invoke($ret);
        } catch( Exception $e) {
            $this->assertContains('file was not opened', $e->getMessage());
        }
        chmod($file,0644);
        @unlink($file);
        @rmdir($dir);
    }

    /**
     * @covers neccsNal::_setUrlCustom
     * @todo   Implement SetUrlCustom().
     */
    public function testSetUrlCustome()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'vlb';
        $_GET['node_id']           = '123456789';
        $ret->_p['scenario'] = 'node';
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_setUrlCustom');
        $method->setAccessible(true);
        $this->assertArrayHasKey('vnf_info', $method->invoke($ret));
        $this->assertArrayHasKey('port_info', $method->invoke($ret));

        //case3
        $stb = $this->getMock('neccsNal',array('_getTenant'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnValue('12345'));
        $stb->_p['function_type'] = 'pfw';
        $stb->_p['IaaS_tenant_id'] = '12345';

        $this->assertArrayHasKey('pnf_info', $method->invoke($stb));
        $this->assertArrayHasKey('port_info', $method->invoke($stb));

        // case 4
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pfw';
        $_GET['scenario']          = 'node';
        $_GET['IaaS_tenant_id']    = '1234';
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_setUrlCustom');
        $method->setAccessible(true);

        $stb = $this->getMock('neccsNal',array('_getTenant'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnValue(''));

        try {
            $method->invoke($stb);
        }catch( Exception $e) {
            $this->assertEquals('',$e->getMessage());
        }

    }

    /**
     * @covers neccsNal::_getIaaSTenantId
     * @todo   Implement GetIaaSTenantId().
     */
    public function testGetIaaSTenantId()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['scenario']      = 'node';
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_getIaaSTenantId');
        $method->setAccessible(true);

        // case1
        $res = array(
            'result' => array(
                'status'     => 'success',
                'error-code' => 'NAL100000',
                'message'    => '',
            ),
            'data' => array(
                          'test' => '1',
                      ),
            'request-id' => '20160708120000000000000',
        );
        $res = json_encode( $res );
        $this->assertArrayHasKey('result', $method->invoke($ret,$res,'GET'));

        // case2
        $res = array(
                        '0' => array(
                            'IaaS_tenant_id' => '1234',
                            'tenant_name'    => 'tenant_name'
                        ),
        );
        $res = json_encode( $res );

        $this->assertEquals(json_decode($res,true), $method->invoke($ret,$res,'GET'));

        // case3
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconenct';
        $_POST['scenario']      = 'service';
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_getIaaSTenantId');
        $method->setAccessible(true);

        $res = array(
            'result' => array(
                'status'     => 'success',
                'error-code' => 'NAL100000',
                'message'    => '',
            ),
            'data' => array(
                          'test' => '1',
                      ),
            'request-id' => '20160708120000000000000',
        );
        $res = json_encode( $res );
        $this->assertArrayHasKey('result', $method->invoke($ret,$res,'POST'));

    }

    /**
     * @covers neccsNal::_execApiHttpMethod
     * @todo   Implement ExecApiHttpMethod().
     */
    public function testExecApiHttpMethod()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        // case 1
        $url = 'http://127.0.0.1/nalapi/test.html';
        $method = new ReflectionMethod($ret, '_execApiHttpMethod');
        $method->setAccessible(true);
        try {
            $method->invoke($ret,$url,array(),1,'GET');
        }catch( Exception $e) {
            $this->assertContains('API error',$e->getMessage());
        }

        // case 2
        $stb = $this->getMock('neccsNal',array('error'));
        $stb->expects($this->any())->method('error')->will($this->returnValue('error'));
        $this->assertEquals($method->invoke($stb,$url,array(),1,'GET'),null);

        // case 3 ( get )
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApiHttpMethod');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1,'GET'));

        // case 4 ( post )
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_POST['scenario']      = 'node';
        $ret = new neccsNal();
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApiHttpMethod');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1,'POST'));

        // case 5 ( put )
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type'] = 'pfw_port_d';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApiHttpMethod');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1,'PUT'));

        // case6 ( delete )
        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $_POST['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $url = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execApiHttpMethod');
        $method->setAccessible(true);
        $this->assertArrayHasKey( 'request-id', $method->invoke($ret,$url,array(),1,'DELETE'));

    }

    /**
     * @covers neccsNal::getEndpointTenant
     * @todo   Implement testGetEndpointTenant().
     */
    public function testGetEndpointTenant(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'getEndpointTenant' );
        $method->setAccessible( true );

        // case1
        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(array()));
        $stb->_p['tenant_name'] = '1234';
        $this->assertEquals( $method->invoke($stb),array());

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNalStb();
        $method = new ReflectionMethod( $ret, 'getEndpointTenant' );
        $method->setAccessible( true );
        $ret->_p['tenant_name'] = '1234';

        // case2
        $this->assertArrayHasKey( 'vim', $method->invoke($ret)) ;
    }

    /**
     * @covers neccsNal::getEndpoint
     * @todo   Implement testGetEndpoint().
     */
    public function testGetEndpoint(){

        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'getEndpoint' );
        $method->setAccessible( true );

        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));

        $this->assertEquals( $method->invoke($stb),'');

        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));
        $stb->_nalConf['api_type'] = 'wim'; // Wim

        $this->assertEquals( $method->invoke($stb),'');

        $param = array("test"=>"1");
        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));

        $this->assertEquals( $method->invoke($stb, $param),'');
    }

    /**
     *  After action
     */
    public function testAfterAction() {
        // after job
        $dir = neccsNal_Config::LOG_DIR . "/job";
        $this->removeDir($dir);
    }

    /**
     * @covers neccsNal::_deleteDirectory
     * @todo   Implement testDeleteDirectory().
     */
    public function testDeleteDirectory()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['operation-type'] = 'show';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();
        $method = new ReflectionMethod($ret, '_deleteDirectory');
        $method->setAccessible(true);

        // case 1
        $this->assertEquals($method->invoke($ret),'');

        // case 2
        $ret->_p['request-id'] = '1234567';
        $this->assertEquals($method->invoke($ret),'');

        // case 3
        $tempdir               = neccsNal_Config::LOG_DIR . "temp_phpunit"  ;
        if( !is_dir($tempdir) ) {
            mkdir($tempdir);
        }
        $fd = fopen( $tempdir ."/case3.txt" , "w");
        fwrite($fd, "TEST");
        fclose($fd);
        $ret->fileDirPath  =  $tempdir;
        $this->assertEquals($method->invoke($ret),'');

        // case 4
        if( is_file($tempdir."/case4.txt")) {
            chmod($tempdir."/case4.txt", 0644);
            @unlink($tempdir."/case4.txt");
        }
        if( !is_dir($tempdir) ) {
            mkdir($tempdir);
        }
        $fd = fopen( $tempdir ."/case4.txt" , "w");
        fwrite($fd, "TEST");
        fclose($fd);
        chmod($tempdir."/case4.txt", 0000);
        $ret->fileDirPath  =  $tempdir;
        if ( PHP_OS == "WIN32" || PHP_OS == "WINNT" ) {
            try {
                $method->invoke($ret);
            }catch( Exception $e ) {
                $this->assertContains('failed in delete file. ',$e->getMessage());
                chmod($tempdir."/case4.txt", 0644);
                @unlink($tempdir."/case4.txt");
            }
        }

        // case 5
        chmod($tempdir, 0000);
        $ret->fileDirPath  =  $tempdir;
        try {
            $method->invoke($ret);
        }catch( Exception $e ) {
            $this->assertContains('failed in delete directory. ',$e->getMessage());
            chmod($tempdir, 0644);
            @rmdir($tempdir);
        }

        // case 6
        if( !is_dir($tempdir) ) {
            mkdir($tempdir);
        }
        $fd = fopen( $tempdir ."/case6.txt" , "w");
        fwrite($fd, "TEST");
        fclose($fd);
        chmod($tempdir."/case6.txt", 0000);
        $stb = $this->getMock('neccsNal',array('_response'));
        $stb->expects($this->any())->method('_response')->will($this->returnArgument(0));
        $stb->fileDirPath  =  $tempdir;
        $this->assertEquals($method->invoke($stb),'');

        // after action
        if ( PHP_OS == "WIN32" || PHP_OS == "WINNT" ) {
            chmod($tempdir."/case6.txt", 0644);
            @unlink($tempdir."/case6.txt");
            chmod($tempdir, 0644);
            @rmdir($tempdir);
        }
    }

    /**
     * @covers neccsNal::_getQuotaLisence
     * @todo   Implement testGetQuotaLisence().
     */
    public function testGetQuotaLisence(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '1';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaLisence' );
        $method->setAccessible( true );

        $execList['license_info'][0]['ID']             =  1;
        $execList['license_info'][0]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type']           =  1;
        $execList['license_info'][0]['device_type']    =  1;
        $execList['license_info'][0]['status']         =  2;
        $execList['license_info'][0]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][1]['ID']             =  1;
        $execList['license_info'][1]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['apl_type']       =  1;
        $execList['license_info'][1]['type']           =  2;
        $execList['license_info'][1]['device_type']    =  1;
        $execList['license_info'][1]['status']         =  2;
        $execList['license_info'][1]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';

        // case 1
        $this->assertEquals( $method->invoke($ret, $execList, $_GET), 1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['type_detail'] = '1';
        $_GET['device_type'] = '3';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaLisence' );
        $method->setAccessible( true );

        $execList['license_info'][0]['ID']             =  1;
        $execList['license_info'][0]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type']           =  1;
        $execList['license_info'][0]['device_type']    =  1;
        $execList['license_info'][0]['status']         =  2;
        $execList['license_info'][0]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][1]['ID']             =  1;
        $execList['license_info'][1]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['apl_type']       =  1;
        $execList['license_info'][1]['type']           =  1;
        $execList['license_info'][1]['device_type']    =  3;
        $execList['license_info'][1]['type_detail']    =  1;
        $execList['license_info'][1]['status']         =  2;
        $execList['license_info'][1]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][2]['ID']             =  1;
        $execList['license_info'][2]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][2]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][2]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][2]['apl_type']       =  1;
        $execList['license_info'][2]['type']           =  1;
        $execList['license_info'][2]['device_type']    =  3;
        $execList['license_info'][2]['type_detail']    =  4;
        $execList['license_info'][2]['status']         =  2;
        $execList['license_info'][2]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';

        // case 2
        $this->assertEquals( $method->invoke($ret, $execList, $_GET), 1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['type_detail'] = '1';
        $_GET['device_type'] = '2';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaLisence' );
        $method->setAccessible( true );

        $execList['license_info'][0]['ID']             =  1;
        $execList['license_info'][0]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type']           =  1;
        $execList['license_info'][0]['device_type']    =  1;
        $execList['license_info'][0]['status']         =  2;
        $execList['license_info'][0]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][1]['ID']             =  1;
        $execList['license_info'][1]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['apl_type']       =  1;
        $execList['license_info'][1]['type']           =  3;
        $execList['license_info'][1]['device_type']    =  2;
        $execList['license_info'][1]['type_detail']    =  1;
        $execList['license_info'][1]['status']         =  2;
        $execList['license_info'][1]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][2]['ID']             =  1;
        $execList['license_info'][2]['license']        =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][2]['tenant_name']    =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][2]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][2]['apl_type']       =  1;
        $execList['license_info'][2]['type']           =  3;
        $execList['license_info'][2]['device_type']    =  2;
        $execList['license_info'][2]['type_detail']    =  4;
        $execList['license_info'][2]['status']         =  2;
        $execList['license_info'][2]['node_id']        =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';

        // case 3
        $this->assertEquals( $method->invoke($ret, $execList, $_GET), 1);

    }

    /**
     * @covers neccsNal::_getContractCntLicense
     * @todo   Implement testGetContractCntLicense().
     */
    public function testGetContractCntLicense(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '2';
        $_GET['type_detail'] = '2';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract_kind'] = '';
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 3;
        $execList['tenant_contract_info'][0]['ID'] = 3;
        $execList['tenant_contract_info'][0]['device_type'] = 2;
        $execList['tenant_contract_info'][0]['contract'] = '2';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '{"type_detail":{"1": "1", "2": "2", "3": "1", "4": "1", "5": "1", "6": "1",  "7": "1"}}';

        // case1
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],4);

        // case 2
        $tenant_name =  $execList['tenant_contract_info'][0]['tenant_name'];
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[1][$tenant_name]['contract_cnt'], 4);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '1';
        $_GET['type_detail'] = '';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['nw_resource_kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 1;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 1;
        $execList['tenant_contract_info'][0]['contract'] = 3;
        $execList['tenant_contract_info'][0]['type_detail_info'] = '';
        $execList['tenant_contract_info'][1]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][1]['nw_resource_kind'] = 2;
        $execList['tenant_contract_info'][1]['apl_type'] = 1;
        $execList['tenant_contract_info'][1]['type'] = 2;
        $execList['tenant_contract_info'][1]['ID'] = 10;
        $execList['tenant_contract_info'][1]['device_type'] = 1;
        $execList['tenant_contract_info'][1]['contract'] = 3;
        $execList['tenant_contract_info'][1]['type_detail_info'] = '';

        // case 3
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],3);

        // case 4
        $tenant_name =  $execList['tenant_contract_info'][0]['tenant_name'];
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[1][$tenant_name]['contract_cnt'], 3);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '3';
        $_GET['type_detail'] = '3';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['nw_resource_kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 1;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 3;
        $execList['tenant_contract_info'][0]['contract'] = '6';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '{"type_detail":{"1": "1", "2": "2", "3": "6", "4": "1", "5": "1", "6": "1",  "7": "1"}}';

        // case 5
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],36);

        // case 6
        $tenant_name =  $execList['tenant_contract_info'][0]['tenant_name'];
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[1][$tenant_name]['contract_cnt'], 36);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '2';
        $_GET['device_type'] = '3';
        $_GET['type_detail'] = '';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['nw_resource_kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 2;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 3;
        $execList['tenant_contract_info'][0]['contract'] = '10';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '';

        // case 7
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],10);

        // case 8
        $tenant_name =  $execList['tenant_contract_info'][0]['tenant_name'];
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[1][$tenant_name]['contract_cnt'], 10);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '1';
        $_GET['type_detail'] = '';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['nw_resource_kind'] = 3;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 3;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 1;
        $execList['tenant_contract_info'][0]['contract'] = '7';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '';

        // case 9
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],7);

        // case 10
        $tenant_name =  $execList['tenant_contract_info'][0]['tenant_name'];
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[1][$tenant_name]['contract_cnt'], 7);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '2';
        $_GET['type_detail'] = '2';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract__kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 3;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 2;
        $execList['tenant_contract_info'][0]['contract'] = '7';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '{"type_detail":{"1":"2","3":"1"}}';

        // case 11
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],7);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '2';
        $_GET['device_type'] = '3';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract__kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 2;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 3;
        $execList['tenant_contract_info'][0]['contract'] = '13';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '';

        // case 12
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],13);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '2';
        $_GET['device_type'] = '3';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract__kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 2;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 3;
        $execList['tenant_contract_info'][0]['contract'] = '13';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '';

        // case 13
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],13);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '2';
        $_GET['device_type'] = '4';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract__kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 2;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 4;
        $execList['tenant_contract_info'][0]['contract'] = '20';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '';

        // case 14
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],20);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '3';
        $_GET['type_detail'] = '7';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract__kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 3;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 2;
        $execList['tenant_contract_info'][0]['contract'] = '7';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '{"type_detail":{"1":"2","3":"1"}}';

        // case 15
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],0 );

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '2';
        $_GET['type_detail'] = '9';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['tenant_contract_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['tenant_contract_info'][0]['contract__kind'] = 2;
        $execList['tenant_contract_info'][0]['apl_type'] = 1;
        $execList['tenant_contract_info'][0]['type'] = 3;
        $execList['tenant_contract_info'][0]['ID'] = 10;
        $execList['tenant_contract_info'][0]['device_type'] = 2;
        $execList['tenant_contract_info'][0]['contract'] = '7';
        $execList['tenant_contract_info'][0]['type_detail_info'] = '{"type_detail":{"1":"2","3":"1"}}';

        // case 16
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],7);

    }

    /**
     * @covers neccsNal::_getUnavailableCntLicense
     * @todo   Implement testGetUnavailableCntLicense().
     */
    public function testGetUnavailableCntLicense(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '1';
        $_GET['type_detail'] = '';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  1;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  1;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  5;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] =  '';
        $execList['license_info'][1]['description'] =  '';
        $execList['license_info'][1]['create_id'] =  'system';
        $execList['license_info'][1]['update_id'] =  'system';
        $execList['license_info'][1]['apl_type']       =  1;
        $execList['license_info'][1]['type'] =  '1';
        $execList['license_info'][1]['delete_flg'] =  '0';
        $execList['license_info'][1]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  0;
        $execList['license_info'][1]['device_type'] =  1;
        $execList['license_info'][1]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '';

        // case 1
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result,0);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '3';
        $_GET['type_detail'] = '3';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  1;  1;
        $execList['license_info'][0]['type_detail'] =  3;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  3;
        $execList['license_info'][0]['device_type'] =  3;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';

        // case 3
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result,1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '2';
        $_GET['type_detail'] = '';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  date("Y-m-d H:i:s");
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  1;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  3;
        $execList['license_info'][0]['device_type'] =  2;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  1;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] =  '';
        $execList['license_info'][1]['description'] =  '';
        $execList['license_info'][1]['create_id'] =  'system';
        $execList['license_info'][1]['update_id'] =  'system';
        $execList['license_info'][1]['apl_type']  =  1;
        $execList['license_info'][1]['type'] =  1;
        $execList['license_info'][1]['delete_flg'] =  '0';
        $execList['license_info'][1]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  3;
        $execList['license_info'][1]['device_type'] =  2;
        $execList['license_info'][1]['node_id'] =  '';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '';

        // case 5
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result,1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '2';
        $_GET['device_type'] = '4';
        $_GET['type_detail'] = '';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  date("Y-m-d H:i:s");
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  2;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  3;
        $execList['license_info'][0]['device_type'] =  4;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  1;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] =  '';
        $execList['license_info'][1]['description'] =  '';
        $execList['license_info'][1]['create_id'] =  'system';
        $execList['license_info'][1]['update_id'] =  'system';
        $execList['license_info'][1]['apl_type']  =  1;
        $execList['license_info'][1]['type'] =  1;
        $execList['license_info'][1]['delete_flg'] =  '0';
        $execList['license_info'][1]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  3;
        $execList['license_info'][1]['device_type'] =  4;
        $execList['license_info'][1]['node_id'] =  '';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '';

        // case 6
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result,1);

    }

    /**
     * @covers neccsNal::_getUseCntLicense
     * @todo   Implement testGetUseCntLicense().
     */
    public function testGetUseCntLicense(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '1';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type'] =  1;
        $execList['license_info'][0]['type'] =  1;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  1;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  5;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] =  '';
        $execList['license_info'][1]['description'] =  '';
        $execList['license_info'][1]['create_id'] =  'system';
        $execList['license_info'][1]['update_id'] =  'system';
        $execList['license_info'][1]['apl_type'] =  1;
        $execList['license_info'][1]['type'] =  '1';
        $execList['license_info'][1]['delete_flg'] =  '0';
        $execList['license_info'][1]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  0;
        $execList['license_info'][1]['device_type'] =  1;
        $execList['license_info'][1]['node_id'] =  '';
        $execList['license_info'][1]['IaaS_tenant_id'] =  '';

        // case 1
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '3';
        $_GET['type_detail'] = '3';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] = 1;
        $execList['license_info'][0]['license'] = 'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] = '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] = '';
        $execList['license_info'][0]['create_id'] = 'system';
        $execList['license_info'][0]['update_id'] = '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type'] = 1;
        $execList['license_info'][0]['type'] =  1;
        $execList['license_info'][0]['delete_flg'] = '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  3;
        $execList['license_info'][0]['type_detail'] =  3;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  1;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] = '';
        $execList['license_info'][1]['description'] = '';
        $execList['license_info'][1]['create_id'] = 'system';
        $execList['license_info'][1]['update_id'] = '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][1]['apl_type'] = 1;
        $execList['license_info'][1]['type'] =  1;
        $execList['license_info'][1]['delete_flg'] = '0';
        $execList['license_info'][1]['create_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  0;
        $execList['license_info'][1]['device_type'] = 3;
        $execList['license_info'][1]['type_detail'] = 1;
        $execList['license_info'][1]['node_id'] = '';
        $execList['license_info'][1]['IaaS_tenant_id'] = '';

        // case 2
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '2';
        $_GET['type_detail'] = '2';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  3;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  2;
        $execList['license_info'][0]['type_detail'] =  '2';
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  1;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] = '';
        $execList['license_info'][1]['description'] = '';
        $execList['license_info'][1]['create_id'] = 'system';
        $execList['license_info'][1]['update_id'] = '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][1]['apl_type'] = 1;
        $execList['license_info'][1]['type'] =  3;
        $execList['license_info'][1]['delete_flg'] = '0';
        $execList['license_info'][1]['create_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  0;
        $execList['license_info'][1]['device_type'] = 2;
        $execList['license_info'][1]['type_detail'] = 2;
        $execList['license_info'][1]['node_id'] = '';
        $execList['license_info'][1]['IaaS_tenant_id'] = '';
        $execList['dc_group_info'][0]['ID'] =  11;
        $execList['dc_group_info'][0]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][0]['create_date'] =  "2016-10-18 18:50:28";
        $execList['dc_group_info'][0]['create_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][0]['delete_flg'] =  "0";
        $execList['dc_group_info'][0]['err_info'] =  "";
        $execList['dc_group_info'][0]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_group_info'][0]['group_name'] =  "nal_svc_cisco1801";
        $execList['dc_group_info'][0]['group_type'] =  2;
        $execList['dc_group_info'][0]['task_status'] =  1;
        $execList['dc_group_info'][0]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][0]['update_date'] =  "2016-10-18 18:57:43";
        $execList['dc_group_info'][0]['update_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][1]['ID'] =  11;
        $execList['dc_group_info'][1]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][1]['create_date'] =  "2016-10-18 18:50:28";
        $execList['dc_group_info'][1]['create_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][1]['delete_flg'] =  "0";
        $execList['dc_group_info'][1]['err_info'] =  "";
        $execList['dc_group_info'][1]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_group_info'][1]['group_name'] =  "nal_svc_cisco1801";
        $execList['dc_group_info'][1]['group_type'] =  1;
        $execList['dc_group_info'][1]['task_status'] =  1;
        $execList['dc_group_info'][1]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][1]['update_date'] =  "2016-10-18 18:57:43";
        $execList['dc_group_info'][1]['update_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_member_info'][0]['ID'] =  11;
        $execList['dc_member_info'][0]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][0]['delete_flg'] =  "0";
        $execList['dc_member_info'][0]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_member_info'][0]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][0]['bandwidth'] =  2;

        // case 3
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '1';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  3;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  1;
        $execList['license_info'][0]['type_detail'] =  3;
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['dc_group_info'][0]['ID'] =  11;
        $execList['dc_group_info'][0]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][0]['create_date'] =  "2016-10-18 18:50:28";
        $execList['dc_group_info'][0]['create_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][0]['delete_flg'] =  "0";
        $execList['dc_group_info'][0]['err_info'] =  "";
        $execList['dc_group_info'][0]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_group_info'][0]['group_name'] =  "nal_svc_cisco1801";
        $execList['dc_group_info'][0]['group_type'] =  1;
        $execList['dc_group_info'][0]['task_status'] =  1;
        $execList['dc_group_info'][0]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][0]['update_date'] =  "2016-10-18 18:57:43";
        $execList['dc_group_info'][0]['update_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_member_info'][0]['ID'] =  11;
        $execList['dc_member_info'][0]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][0]['delete_flg'] =  "0";
        $execList['dc_member_info'][0]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_member_info'][0]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][0]['bandwidth'] =  "";
        $execList['dc_member_info'][1]['ID'] =  13;
        $execList['dc_member_info'][1]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][1]['delete_flg'] =  "0";
        $execList['dc_member_info'][1]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_member_info'][1]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][1]['bandwidth'] =  "";

        // case 4
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '3';
        $_GET['device_type'] = '2';
        $_GET['type_detail'] = '2';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  3;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  2;
        $execList['license_info'][0]['type_detail'] =  '2';
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  1;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] = '';
        $execList['license_info'][1]['description'] = '';
        $execList['license_info'][1]['create_id'] = 'system';
        $execList['license_info'][1]['update_id'] = '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][1]['apl_type'] = 1;
        $execList['license_info'][1]['type'] =  3;
        $execList['license_info'][1]['delete_flg'] = '0';
        $execList['license_info'][1]['create_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  0;
        $execList['license_info'][1]['device_type'] = 2;
        $execList['license_info'][1]['type_detail'] = 2;
        $execList['license_info'][1]['node_id'] = '';
        $execList['license_info'][1]['IaaS_tenant_id'] = '';
        $execList['dc_group_info'][0]['ID'] =  11;
        $execList['dc_group_info'][0]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][0]['create_date'] =  "2016-10-18 18:50:28";
        $execList['dc_group_info'][0]['create_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][0]['delete_flg'] =  "0";
        $execList['dc_group_info'][0]['err_info'] =  "";
        $execList['dc_group_info'][0]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_group_info'][0]['group_name'] =  "nal_svc_cisco1801";
        $execList['dc_group_info'][0]['group_type'] =  2;
        $execList['dc_group_info'][0]['task_status'] =  1;
        $execList['dc_group_info'][0]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][0]['update_date'] =  "2016-10-18 18:57:43";
        $execList['dc_group_info'][0]['update_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][1]['ID'] =  11;
        $execList['dc_group_info'][1]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][1]['create_date'] =  "2016-10-18 18:50:28";
        $execList['dc_group_info'][1]['create_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_group_info'][1]['delete_flg'] =  "0";
        $execList['dc_group_info'][1]['err_info'] =  "";
        $execList['dc_group_info'][1]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_group_info'][1]['group_name'] =  "nal_svc_cisco1801";
        $execList['dc_group_info'][1]['group_type'] =  1;
        $execList['dc_group_info'][1]['task_status'] =  1;
        $execList['dc_group_info'][1]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_group_info'][1]['update_date'] =  "2016-10-18 18:57:43";
        $execList['dc_group_info'][1]['update_id'] =  "6ac7d4fccdc5414190db875cd9e67456";
        $execList['dc_member_info'][0]['ID'] =  11;
        $execList['dc_member_info'][0]['IaaS_tenant_id'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][0]['delete_flg'] =  "0";
        $execList['dc_member_info'][0]['group_id'] =  "81eb81d5-72b5-420a-86ff-d3e6a05d7667";
        $execList['dc_member_info'][0]['tenant_name'] =  "996ddd04240249ca960fa623ee18e910";
        $execList['dc_member_info'][0]['bandwidth'] =  2;

        // case 3
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '1';
        $_GET['device_type'] = '3';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  1;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  3;
        $execList['license_info'][0]['type_detail'] =  '2';
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][2]['ID'] =  1;
        $execList['license_info'][2]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][2]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][2]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][2]['description'] =  '';
        $execList['license_info'][2]['create_id'] =  'system';
        $execList['license_info'][2]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][2]['apl_type']       =  1;
        $execList['license_info'][2]['type'] =  1;
        $execList['license_info'][2]['delete_flg'] =  '0';
        $execList['license_info'][2]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][2]['status'] =  2;
        $execList['license_info'][2]['device_type'] =  3;
        $execList['license_info'][2]['type_detail'] =  '4';
        $execList['license_info'][2]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][2]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][1]['ID'] =  1;
        $execList['license_info'][1]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][1]['update_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['tenant_name'] = '';
        $execList['license_info'][1]['description'] = '';
        $execList['license_info'][1]['create_id'] = 'system';
        $execList['license_info'][1]['update_id'] = '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][1]['apl_type'] = 1;
        $execList['license_info'][1]['type'] =  3;
        $execList['license_info'][1]['delete_flg'] = '0';
        $execList['license_info'][1]['create_date'] = '2016-10-21 10:54:24';
        $execList['license_info'][1]['status'] =  0;
        $execList['license_info'][1]['device_type'] = 2;
        $execList['license_info'][1]['type_detail'] = 2;
        $execList['license_info'][1]['node_id'] = '';
        $execList['license_info'][1]['IaaS_tenant_id'] = '';

        // case 3
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = "/test/resource/";
        $_GET['function_type']     = 'license';
        $_GET['type'] = '2';
        $_GET['device_type'] = '4';
        $_GET['IaaS_tenant_id'] = '1234';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntLicense' );
        $method->setAccessible( true );

        $execList = array();
        $execList['license_info'][0]['ID'] =  1;
        $execList['license_info'][0]['license'] =  'SGLIC-D471-GNBB-KW8N-WAM2-CPWB-VCAR-V7QH-Q71X';
        $execList['license_info'][0]['update_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['tenant_name'] =  '996ddd04240249ca960fa623ee18e910';
        $execList['license_info'][0]['description'] =  '';
        $execList['license_info'][0]['create_id'] =  'system';
        $execList['license_info'][0]['update_id'] =  '6ac7d4fccdc5414190db875cd9e67456';
        $execList['license_info'][0]['apl_type']       =  1;
        $execList['license_info'][0]['type'] =  2;
        $execList['license_info'][0]['delete_flg'] =  '0';
        $execList['license_info'][0]['create_date'] =  '2016-10-21 10:54:24';
        $execList['license_info'][0]['status'] =  2;
        $execList['license_info'][0]['device_type'] =  4;
        $execList['license_info'][0]['type_detail'] =  '';
        $execList['license_info'][0]['node_id'] =  '553415d8-f2ea-4c23-8cf7-11c41c37cca0';
        $execList['license_info'][0]['IaaS_tenant_id'] =  '996ddd04240249ca960fa623ee18e910';

        // case 4
        $result = array();
        $result = $method->invoke($ret, $execList, $_GET);
        $this->assertEquals( $result[0],1);

    }

    /**
     * @covers neccsNal::_getQuotaPnf
     * @todo   Implement testGetQuotaPnf().
     */
    public function testGetQuotaPnf(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '1';
        $_GET['device_type']       = '1';
        $_GET['redundant_configuration_flg'] = '1';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaPnf' );
        $method->setAccessible( true );

        $result['apl_info'][0]['apl_type'] = 2;
        $result['apl_info'][0]['type']     = 1;
        $result['apl_info'][0]['device_type'] = 1;
        $result['apl_info'][0]['node_id'] = '1234';
        $result['apl_info'][0]['redundant_configuration_flg'] = '0';
        $result['apl_info'][1]['apl_type'] = 2;
        $result['apl_info'][1]['type']     = 1;
        $result['apl_info'][1]['device_type'] = 1;
        $result['apl_info'][1]['node_id'] = '1234';;
        $result['apl_info'][1]['redundant_configuration_flg'] = 1;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 1);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '2';
        $_GET['device_type']       = '1';
        $_GET['redundant_configuration_flg'] = '0';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 2
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaPnf' );
        $method->setAccessible( true );

        $result['apl_info'][0]['apl_type'] = 2;
        $result['apl_info'][0]['type']     = 1;
        $result['apl_info'][0]['device_type'] = 1;
        $result['apl_info'][0]['node_id'] = '1234';
        $result['apl_info'][0]['redundant_configuration_flg'] = 0;
        $result['apl_info'][1]['apl_type'] = 2;
        $result['apl_info'][1]['type']     = 2;
        $result['apl_info'][1]['device_type'] = 1;
        $result['apl_info'][1]['node_id'] = '1234';
        $result['apl_info'][1]['redundant_configuration_flg'] = 0;
        $result['apl_info'][2]['apl_type'] = 2;
        $result['apl_info'][2]['type']     = 2;
        $result['apl_info'][2]['device_type'] = 1;
        $result['apl_info'][2]['node_id'] = '1234';
        $result['apl_info'][2]['redundant_configuration_flg'] = 1;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 1);

    }

    /**
     * @covers neccsNal::_getContractCntPnf
     * @todo   Implement testGetContractCntPnf().
     */
    public function testGetContractCntPnf(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '2';
        $_GET['device_type']       = '1';
        $_GET['redundant_configuration_flg'] = '0';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntPnf' );
        $method->setAccessible( true );

        $result['tenant_contract_info'][0]['apl_type'] = 2;
        $result['tenant_contract_info'][0]['type']     = 1;
        $result['tenant_contract_info'][0]['device_type'] = 1;
        $result['tenant_contract_info'][0]['contract'] = '4';
        $result['tenant_contract_info'][0]['redundant_configuration_flg'] = 1;
        $result['tenant_contract_info'][1]['apl_type'] = 2;
        $result['tenant_contract_info'][1]['type']     = 2;
        $result['tenant_contract_info'][1]['device_type'] = 1;
        $result['tenant_contract_info'][1]['contract'] = '6';
        $result['tenant_contract_info'][1]['redundant_configuration_flg'] = 0;
        $result['tenant_contract_info'][2]['apl_type'] = 2;
        $result['tenant_contract_info'][2]['type']     = 2;
        $result['tenant_contract_info'][2]['device_type'] = 1;
        $result['tenant_contract_info'][2]['contract'] = '7';
        $result['tenant_contract_info'][2]['redundant_configuration_flg'] = 1;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 6);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '1';
        $_GET['device_type']       = '1';
        $_GET['redundant_configuration_flg'] = '1';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 2
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntPnf' );
        $method->setAccessible( true );

        $result['tenant_contract_info'][0]['apl_type'] = 2;
        $result['tenant_contract_info'][0]['type']     = 1;
        $result['tenant_contract_info'][0]['device_type'] = 1;
        $result['tenant_contract_info'][0]['contract'] = '10';
        $result['tenant_contract_info'][0]['redundant_configuration_flg'] = 1;
        $result['tenant_contract_info'][1]['apl_type'] = 1;
        $result['tenant_contract_info'][1]['type']     = 2;
        $result['tenant_contract_info'][1]['device_type'] = 1;
        $result['tenant_contract_info'][1]['contract'] = '6';
        $result['tenant_contract_info'][1]['redundant_configuration_flg'] = 1;
        $result['tenant_contract_info'][2]['apl_type'] = 1;
        $result['tenant_contract_info'][2]['type']     = 2;
        $result['tenant_contract_info'][2]['device_type'] = 1;
        $result['tenant_contract_info'][2]['contract'] = '6';
        $result['tenant_contract_info'][2]['redundant_configuration_flg'] = 0;
        $result['tenant_contract_info'][3]['apl_type'] = 2;
        $result['tenant_contract_info'][3]['type']     = 1;
        $result['tenant_contract_info'][3]['device_type'] = 1;
        $result['tenant_contract_info'][3]['contract'] = '6';
        $result['tenant_contract_info'][3]['redundant_configuration_flg'] = 0;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 10);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '1';
        $_GET['device_type']       = '4';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 3
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntPnf' );
        $method->setAccessible( true );

        $result['tenant_contract_info'][0]['apl_type'] = 2;
        $result['tenant_contract_info'][0]['type']     = 1;
        $result['tenant_contract_info'][0]['device_type'] = 4;
        $result['tenant_contract_info'][0]['contract'] = '15';
        $result['tenant_contract_info'][1]['apl_type'] = 2;
        $result['tenant_contract_info'][1]['type']     = 2;
        $result['tenant_contract_info'][1]['device_type'] = 1;
        $result['tenant_contract_info'][1]['contract'] = '6';
        $result['tenant_contract_info'][1]['redundant_configuration_flg'] = 1;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 15);

    }

    /**
     * @covers neccsNal::_getUseCntPnf
     * @todo   Implement testGetUseCntPnf().
     */
    public function testGetUseCntPnf(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '1';
        $_GET['device_type']       = '2';
        $_GET['redundant_configuration_flg'] = 1;
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntPnf' );
        $method->setAccessible( true );

        // case1
        $result['apl_info'][0]['apl_type'] = 2;
        $result['apl_info'][0]['type']     = 1;
        $result['apl_info'][0]['device_type'] = 1;
        $result['apl_info'][0]['redundant_configuration_flg'] = 1;
        $result['apl_info'][0]['tenant_name'] = 'tenant';
        $result['apl_info'][0]['task_status'] = 1;
        // case 2
        $result['apl_info'][1]['apl_type'] = 2;
        $result['apl_info'][1]['type']     = 1;
        $result['apl_info'][1]['device_type'] = 2;
        $result['apl_info'][1]['redundant_configuration_flg'] = 1;
        $result['apl_info'][1]['tenant_name'] = '';
        $result['apl_info'][1]['task_status'] = 1;
        // case 3
        $result['apl_info'][2]['apl_type'] = 2;
        $result['apl_info'][2]['type']     = 2;
        $result['apl_info'][2]['device_type'] = 3;
        $result['apl_info'][2]['tenant_name'] = 'tenant';
        $result['apl_info'][2]['task_status'] = 9;
        // case 4
        $result['apl_info'][1]['apl_type'] = 2;
        $result['apl_info'][1]['type']     = 1;
        $result['apl_info'][1]['device_type'] = 2;
        $result['apl_info'][1]['redundant_configuration_flg'] = 1;
        $result['apl_info'][1]['tenant_name'] = 'tenant';
        $result['apl_info'][1]['task_status'] = 1;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 1);

    }

    /**
     * @covers neccsNal::_getUnavailableCntPnf
     * @todo   Implement testGetUnavailableCntPnf().
     */
    public function testGetUnavailableCntPnf(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'pnf';
        $_GET['type']              = '2';
        $_GET['device_type']       = '3';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntPnf' );
        $method->setAccessible( true );

        // case 1
        $result['apl_info'][0]['apl_type'] = 2;
        $result['apl_info'][0]['type']     = 1;
        $result['apl_info'][0]['device_type'] = 1;
        $result['apl_info'][0]['redundant_configuration_flg'] = 1;
        $result['apl_info'][0]['tenant_name'] = 'tenant';
        $result['apl_info'][0]['task_status'] = 0;
        // case 2
        $result['apl_info'][1]['apl_type'] = 1;
        $result['apl_info'][1]['type']     = 1;
        $result['apl_info'][1]['device_type'] = 1;
        $result['apl_info'][1]['tenant_name'] = 'tenant';
        $result['apl_info'][1]['task_status'] = 0;
        // case 3
        $result['apl_info'][0]['apl_type'] = 2;
        $result['apl_info'][0]['type']     = 2;
        $result['apl_info'][0]['device_type'] = 3;
        $result['apl_info'][0]['redundant_configuration_flg'] = 1;
        $result['apl_info'][1]['tenant_name'] = '';
        $result['apl_info'][1]['task_status'] = 1;

        $this->assertEquals($method->invoke($ret, $result, $_GET), 1);

    }

    /**
     * @covers neccsNal::_getUnavailableCntGlobalip
     * @todo   Implement testGetUnavailableCntGlobalip().
     */
    public function testGetUnavailableCntGlobalip(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'globalip';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntGlobalip' );
        $method->setAccessible( true );

        // case1
        $result['global_ip_address_info'][0]['global_ip'] = '172.17.3.1';
        $result['global_ip_address_info'][1]['global_ip'] = '172.17.3.2';

        $this->assertEquals($method->invoke($ret, $result), 0);

    }

    /**
     * @covers neccsNal::_getUseCntGlobalip
     * @todo   Implement testGetUseCntGlobalip().
     */
    public function testGetUseCntGlobalip(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'globalip';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntGlobalip' );
        $method->setAccessible( true );

        // case 1
        $result['global_ip_address_info'][0]['status'] = '101';
        $result['global_ip_address_info'][1]['status'] = '0';
        $result['global_ip_address_info'][2]['status'] = '202';

        $this->assertEquals($method->invoke($ret, $result, $_GET), 2);

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'ext_globalip';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntGlobalip' );
        $method->setAccessible( true );

        $this->assertEquals($method->invoke($ret, $result, $_GET), 1);

    }

    /**
     * @covers neccsNal::_getContractCntGlobalip
     * @todo   Implement testGetContractCntGlobalip().
     */
    public function testGetContractCntGlobalip(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'globalip';
        $_GET['nw_resource_kind']  = '1';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntGlobalip' );
        $method->setAccessible( true );

        $result['tenant_contract_info'][0]['contract'] = '10';
        $result['tenant_contract_info'][0]['contract_kind'] = '1';
        $result['tenant_contract_info'][1]['contract'] = '15';
        $result['tenant_contract_info'][1]['contract_kind'] = '1';
        $result['tenant_contract_info'][2]['contract'] = '7';
        $result['tenant_contract_info'][2]['contract_kind'] = '1';

        $this->assertEquals($method->invoke($ret, $result, $_GET), 32);

    }

    /**
     * @covers neccsNal::_getQuotaGlobalip
     * @todo   Implement testGetQuotaGlobalip().
     */
    public function testGetQuotaGlobalip(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'globalip';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaGlobalip' );
        $method->setAccessible( true );

        $result['global_ip_address_info'][0]['global_ip'] = '172.17.3.1';
        $result['global_ip_address_info'][1]['global_ip'] = '172.17.3.2';
        $result['global_ip_address_info'][2]['global_ip'] = '172.17.3.3';
        $result['global_ip_address_info'][3]['global_ip'] = '172.17.3.4';

        $this->assertEquals($method->invoke($ret, $result), 4);

    }

    /**
     * @covers neccsNal::_getQuotaMsa
     * @todo   Implement testGetQuotaMsa().
     */
    public function testGetQuotaMsa(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'msa_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaMsa' );
        $method->setAccessible( true );

        $result['msa_info'][0]['vlan_id'] = '806';
        $result['msa_info'][1]['vlan_id'] = '807';
        $result['msa_info'][2]['vlan_id'] = '808';

        $this->assertEquals($method->invoke($ret, $result), 3);

    }

    /**
     * @covers neccsNal::_getContractCntMsa
     * @todo   Implement testGetContractCntMsa().
     */
    public function testGetContractCntMsa(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'msa_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntMsa' );
        $method->setAccessible( true );

        $result['tenant_contract_info'][0]['tenant_name'] = 'tenant1';
        $result['tenant_contract_info'][1]['tenant_name'] = 'tenant2';
        $result['tenant_contract_info'][2]['tenant_name'] = 'tenant3';
        $result['tenant_contract_info'][3]['tenant_name'] = 'tenant3';
        $result['tenant_contract_info'][4]['tenant_name'] = 'tenant1';
        $result['tenant_contract_info'][5]['tenant_name'] = 'tenant4';

        $result['pod_info'][0]['pod_id'] = 'pod0001';
        $result['pod_info'][1]['pod_id'] = 'pod0002';
        $result['pod_info'][2]['pod_id'] = 'pod0003';

        $this->assertEquals($method->invoke($ret, $result), 12);

    }

    /**
     * @covers neccsNal::_getUseCntMsa
     * @todo   Implement testGetUseCntMsa().
     */
    public function testGetUseCntMsa(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'msa_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntMsa' );
        $method->setAccessible( true );

        // case1
        $result['msa_info'][0]['status'] = '1';
        $result['msa_info'][1]['status'] = '1';
        $result['msa_info'][2]['status'] = '0';

        $this->assertEquals($method->invoke($ret, $result, $_GET), 2);

    }

    /**
     * @covers neccsNal::_getUnavailableCntMsa
     * @todo   Implement testGetUnavailableCntMsa().
     */
    public function testGetUnavailableCntMsa(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'msa_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntMsa' );
        $method->setAccessible( true );

        // case1
        $result['msa_info'][0]['status'] = '1';
        $result['msa_info'][1]['status'] = '1';
        $result['msa_info'][2]['status'] = '0';

        $this->assertEquals($method->invoke($ret, $result), 0);

    }

    /**
     * @covers neccsNal::_getQuotaWan
     * @todo   Implement testGetQuotaWan().
     */
    public function testGetQuotaWan(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'wan_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getQuotaWan' );
        $method->setAccessible( true );

        $result['wan_info'][0]['vlan_id'] = '806';
        $result['wan_info'][1]['vlan_id'] = '807';
        $result['wan_info'][2]['vlan_id'] = '808';

        $this->assertEquals($method->invoke($ret, $result), 3);

    }

    /**
     * @covers neccsNal::_getContractCntWan
     * @todo   Implement testGetContractCntWan().
     */
    public function testGetContractCntWan(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'wan_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        // case 1
        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getContractCntWan' );
        $method->setAccessible( true );

        $result['tenant_contract_info'][0]['tenant_name'] = 'tenant1';
        $result['tenant_contract_info'][0]['type'] = '3';
        $result['tenant_contract_info'][0]['device_type'] = '1';
        $result['tenant_contract_info'][0]['contract']    = '1';
        $result['tenant_contract_info'][1]['tenant_name'] = 'tenant2';
        $result['tenant_contract_info'][1]['type'] = '3';
        $result['tenant_contract_info'][1]['device_type'] = '2';
        $result['tenant_contract_info'][1]['type_detail_info'] = '{"type_detail": {"3": "2"}}';
        $result['tenant_contract_info'][1]['contract']    = '1';
        $result['tenant_contract_info'][2]['tenant_name'] = 'tenant3';
        $result['tenant_contract_info'][2]['type'] = '3';
        $result['tenant_contract_info'][2]['device_type'] = '1';
        $result['tenant_contract_info'][2]['contract']    = '1';
        $result['tenant_contract_info'][3]['tenant_name'] = 'tenant3';
        $result['tenant_contract_info'][3]['type'] = '2';
        $result['tenant_contract_info'][3]['device_type'] = '1';
        $result['tenant_contract_info'][3]['contract']    = '1';
        $result['tenant_contract_info'][4]['tenant_name'] = 'tenant1';
        $result['tenant_contract_info'][4]['type'] = '3';
        $result['tenant_contract_info'][4]['device_type'] = '2';
        $result['tenant_contract_info'][4]['type_detail_info'] = '{"type_detail": {"3": "2","4": "1"}}';
        $result['tenant_contract_info'][4]['contract']    = '2';
        $result['tenant_contract_info'][5]['tenant_name'] = 'tenant4';
        $result['tenant_contract_info'][5]['type'] = '3';
        $result['tenant_contract_info'][5]['device_type'] = '1';
        $result['tenant_contract_info'][5]['contract']    = '1';
        $result['tenant_contract_info'][6]['tenant_name'] = 'tenant5';
        $result['tenant_contract_info'][6]['type'] = '1';
        $result['tenant_contract_info'][6]['device_type'] = '1';
        $result['tenant_contract_info'][6]['contract']    = '1';

        $result['pod_info'][0]['pod_id']   = 'pod0001';
        $result['pod_info'][0]['use_type'] = '1';
        $result['pod_info'][1]['pod_id']   = 'pod0002';
        $result['pod_info'][1]['use_type'] = '2';
        $result['pod_info'][2]['pod_id']   = 'pod0003';
        $result['pod_info'][2]['use_type'] = '2';

        $this->assertEquals($method->invoke($ret, $result), 22);

        // case 2
        $result['tenant_contract_info'][0]['tenant_name'] = 'tenant1';
        $result['tenant_contract_info'][1]['tenant_name'] = 'tenant2';
        $result['tenant_contract_info'][2]['tenant_name'] = 'tenant3';
        $result['tenant_contract_info'][3]['tenant_name'] = 'tenant3';
        $result['tenant_contract_info'][4]['tenant_name'] = 'tenant1';
        $result['tenant_contract_info'][5]['tenant_name'] = 'tenant4';

        $result['pod_info'][0]['pod_id']   = 'pod0001';
        $result['pod_info'][0]['use_type'] = '3';
        $result['pod_info'][1]['pod_id']   = 'pod0002';
        $result['pod_info'][1]['use_type'] = '3';
        $result['pod_info'][2]['pod_id']   = 'pod0003';
        $result['pod_info'][2]['use_type'] = '3';

        $this->assertEquals($method->invoke($ret, $result), 33);

    }

    /**
     * @covers neccsNal::_getUseCntWan
     * @todo   Implement testGetUseCntWan().
     */
    public function testGetUseCntWan(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'wan_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUseCntWan' );
        $method->setAccessible( true );

        // case1
        $result['wan_info'][0]['status'] = '1';
        $result['wan_info'][1]['status'] = '1';
        $result['wan_info'][2]['status'] = '0';

        $this->assertEquals($method->invoke($ret, $result, $_GET), 2);

    }

    /**
     * @covers neccsNal::_getUnavailableCntWan
     * @todo   Implement testGetUnavailableCntWan().
     */
    public function testGetUnavailableCntWan(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'wan_vlan';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getUnavailableCntWan' );
        $method->setAccessible( true );

        // case1
        $result['wan_info'][0]['status'] = '1';
        $result['wan_info'][1]['status'] = '1';
        $result['wan_info'][2]['status'] = '0';

        $this->assertEquals($method->invoke($ret, $result), 0);

    }

    /**
     * @covers neccsNal::_execMultiApi
     * @todo   Implement testExecMultiApi().
     */
    public function testExecMultiApi()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $ret = new neccsNal();

        // case 1
        $url = array();
        $url[] = 'http://127.0.0.1/nalapi/test.html';
        $method = new ReflectionMethod($ret, '_execMultiApi');
        $method->setAccessible(true);
        try {
            $method->invoke($ret,$url,array(),1);
        }catch( Exception $e) {
            $this->assertContains('API error',$e->getMessage());
        }

        // case 2 ( get )
        $url = array();
        $url[] = 'http://127.0.0.1/Nal/';
        $url[] = 'http://127.0.0.1/Wim/';
        $method = new ReflectionMethod($ret, '_execMultiApi');
        $method->setAccessible(true);
        $result = $method->invoke($ret,$url,array(),1);
        $this->assertArrayHasKey( 'request-id', $result[0] );
        $this->assertArrayHasKey( 'request-id', $result[1] );

        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'vlb';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $_POST['scenario'] = "node";
        $ret = new neccsNal();

        // case 3 ( post )
        $url = array();
        $url[] = 'http://127.0.0.1/Nal/';
        $url[] = 'http://127.0.0.1/Wim/';
        $method = new ReflectionMethod($ret, '_execMultiApi');
        $method->setAccessible(true);
        $result = $method->invoke($ret,$url,array(),1);
        $this->assertArrayHasKey( 'request-id', $result[0] );
        $this->assertArrayHasKey( 'request-id', $result[1] );

        $_SERVER['REQUEST_METHOD'] = 'DELETE';
        $_POST['function_type'] = 'vfw';
        $_SERVER['REQUEST_URI'] = "/test/node/";
        $_POST['scenario'] = "node";
        $ret = new neccsNal();

        // case 3 ( delete )
        $url = array();
        $url[] = 'http://127.0.0.1/Nal/';
        $method = new ReflectionMethod($ret, '_execMultiApi');
        $method->setAccessible(true);
        $result = $method->invoke($ret,$url,array(),1);
        $this->assertArrayHasKey( 'request-id', $result[0] );

    }

    /**
     * @covers neccsNal::_getMultiIaaSTenantId
     * @todo   Implement testGetMultiIaaSTenantId().
     */
    public function testGetMultiIaaSTenantId()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'vlb';
        $_GET['scenario']      = 'node';
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_getMultiIaaSTenantId');
        $method->setAccessible(true);

        // case1
        $res = array(
            'result' => array(
                'status'     => 'success',
                'error-code' => 'NAL100000',
                'message'    => '',
            ),
            'data' => array(
                          'test' => '1',
                      ),
            'request-id' => '20160708120000000000000',
        );
        $res = json_encode( $res );
        $this->assertArrayHasKey('result', $method->invoke($ret,$res,'GET'));

        // case2
        $res = array(
                        '0' => array(
                            'IaaS_tenant_id' => '1234',
                            'tenant_name'    => 'tenant_name'
                        ),
        );
        $res = json_encode( $res );

        $this->assertEquals(json_decode($res,true), $method->invoke($ret,$res,'GET'));

        // case3
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_POST['function_type'] = 'dcconenct';
        $_POST['scenario']      = 'service';
        $ret = new neccsNal();

        $method = new ReflectionMethod($ret, '_getMultiIaaSTenantId');
        $method->setAccessible(true);

        $res = array(
            'result' => array(
                'status'     => 'success',
                'error-code' => 'NAL100000',
                'message'    => '',
            ),
            'data' => array(
                          'test' => '1',
                      ),
            'request-id' => '20160708120000000000000',
        );
        $res = json_encode( $res );
        $this->assertArrayHasKey('result', $method->invoke($ret,$res,'POST'));

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'vfw';
        $_GET['scenario']          = 'node';

        $tenantList = array(
            '0' => array(
                'tenant_name' => 'tenant1',
                'IaaS_tenant_id' => '1234',
            )
        );

        $ret = new neccsNal();
        $reflection_class = new ReflectionClass( $ret );
        $property = $reflection_class->getProperty('_tenantList');
        $property->setAccessible( true );

        $property->setValue($ret, $tenantList );

        $method = $reflection_class->getMethod('_getMultiIaaSTenantId');
        $method->setAccessible(true);

        $res = array(
            '0' => array(
                'test'        => '1',
                'tenant_name' => 'tenant1',
            ),
        );

        $result = $res;
        $result[0]['IaaS_tenant_id'] = '1234';

        $this->assertEquals($method->invoke($ret, json_encode( $res ), 'GET'), $result);

        $tenantList = array(
            '0' => array(
                'tenant_name' => 'tenant10',
                'IaaS_tenant_id' => '1234',
            )
        );

        $ret = new neccsNal();
        $reflection_class = new ReflectionClass( $ret );
        $property = $reflection_class->getProperty('_tenantList');
        $property->setAccessible( true );

        $property->setValue($ret, $tenantList );

        $method = $reflection_class->getMethod('_getMultiIaaSTenantId');
        $method->setAccessible(true);

        $result = $res;
        $result[0]['IaaS_tenant_id'] = '';

        $this->assertEquals($method->invoke($ret, json_encode( $res ), 'GET'), $result);

        $tenantList = array(
            '0' => array(
                'tenant_name' => 'tenant1',
                'IaaS_tenant_id' => '1234',
            )
        );

        $res = array(
            '0' => array(
                'test'        => '1',
            ),
        );

        $ret = new neccsNal();
        $reflection_class = new ReflectionClass( $ret );
        $property = $reflection_class->getProperty('_tenantList');
        $property->setAccessible( true );

        $property->setValue($ret, $tenantList );

        $method = $reflection_class->getMethod('_getMultiIaaSTenantId');
        $method->setAccessible(true);

        $result = $res;

        $this->assertEquals($method->invoke($ret, json_encode( $res ), 'GET'), $result);

    }

    /**
     * @covers neccsNal::getConfig
     * @todo   Implement testGetConfig().
     */
    public function testGetConfig(){

        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'getConfig' );
        $method->setAccessible( true );

        $param = array("test"=>"1");
        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));

        $this->assertEquals( $method->invoke($stb, $param),'');

        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));
        $stb->_nalConf['api_type'] = 'wim'; // Wim

        $this->assertEquals( $method->invoke($stb),'');

        $param = array("no_wim_flg"=>"1");
        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));
        $stb->_nalConf['api_type'] = 'wim'; // Wim

        $this->assertEquals( $method->invoke($stb, $param),'');

    }

    /**
     * @covers neccsNal::getTenantContract
     * @todo   Implement testGetTenantContract().
     */
    public function testGetTenantContract(){

        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'getTenantContract' );
        $method->setAccessible( true );

        $param = array("test"=>"1");
        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));

        $this->assertEquals( $method->invoke($stb, $param),'');

        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));
        $stb->_nalConf['api_type'] = 'wim'; // Wim

        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     * @covers neccsNal::getPod
     * @todo   Implement testGetPod().
     */
    public function testGetPod(){

        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'getPod' );
        $method->setAccessible( true );

        $param = array("test"=>"1");
        $stb = $this->getMock('neccsNal',array('_execApi'));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(''));

        $this->assertEquals( $method->invoke($stb, $param),'');

    }

    /**
     * @covers neccsNal::listUsageReport
     * @todo   Implement testListUsageReport().
     */
    public function testListUsageReport(){
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'listUsageReport' );
        $method->setAccessible( true );

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.79.241:5000/v3';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '565ace8b4cbe40a481658b031713be11';
        $endpoint_info['role_id']            = 'ed1e3ba27b394657b9fcf33ce232a45e';
        $endpoint_info['admin_tenant_id']    = '6219a6abf01144ab9004b7ca59322d06';
        $endpoint_info['admin_tenant_name']  = 'admin';

        $this->assertArrayHasKey( 'tenant_usages', $method->invoke($ret, 'admin', $endpoint_info) );
/*
        try {
            print_r( $method->invoke($ret, 'admin', $endpoint_info) );
            $method->invoke($ret, 'admin', $endpoint_info);
        }catch( Exception $e){
            $this->assertContains( 'ERROR', $e->getMessage() );
        }
*/

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.79.241:5000/v3';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '565ace8b4cbe40a481658b031713be11';
        $endpoint_info['role_id']            = 'ed1e3ba27b394657b9fcf33ce232a45e';
        $endpoint_info['admin_tenant_id']    = '6219a6abf01144ab9004b7ca59322d06';
        $endpoint_info['admin_tenant_name']  = 'admin';

        try {
            $method->invoke($ret, 'test', $endpoint_info);
        }catch( Exception $e){
            $this->assertContains( 'ERROR', $e->getMessage() );
        }
    }

    /**
     * @covers neccsNal::listFlavorsDetail
     * @todo   Implement testListFlavorsDetail().
     */
    public function testListFlavorsDetail(){
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'listFlavorsDetail' );
        $method->setAccessible( true );

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.79.241:5000/v3';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '565ace8b4cbe40a481658b031713be11';
        $endpoint_info['role_id']            = 'ed1e3ba27b394657b9fcf33ce232a45e';
        $endpoint_info['admin_tenant_id']    = '6219a6abf01144ab9004b7ca59322d06';
        $endpoint_info['admin_tenant_name']  = 'admin';

        $this->assertArrayHasKey( 'flavors', $method->invoke($ret, 'admin', $endpoint_info) );
/*
        try {
            print_r( $method->invoke($ret, 'admin', $endpoint_info) );
            $method->invoke($ret, 'admin', $endpoint_info);
        }catch( Exception $e){
            print_r( $e->getMessage() );
            $this->assertContains( 'ERROR', $e->getMessage() );
        }
*/

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.79.241:5000/v3';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '565ace8b4cbe40a481658b031713be11';
        $endpoint_info['role_id']            = 'ed1e3ba27b394657b9fcf33ce232a45e';
        $endpoint_info['admin_tenant_id']    = '6219a6abf01144ab9004b7ca59322d06';
        $endpoint_info['admin_tenant_name']  = 'admin';

        try {
            $method->invoke($ret, 'test', $endpoint_info);
        }catch( Exception $e){
            $this->assertContains( 'ERROR', $e->getMessage() );
        }
    }

    /**
     * @covers neccsNal::listHostDetail
     * @todo   Implement testListHostDetail().
     */
    public function testListHostDetail(){
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, 'listHostDetail' );
        $method->setAccessible( true );

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.79.241:5000/v3';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '565ace8b4cbe40a481658b031713be11';
        $endpoint_info['role_id']            = 'ed1e3ba27b394657b9fcf33ce232a45e';
        $endpoint_info['admin_tenant_id']    = '6219a6abf01144ab9004b7ca59322d06';
        $endpoint_info['admin_tenant_name']  = 'admin';

        $result = $method->invoke($ret, 'admin', $endpoint_info);
        $this->assertArrayHasKey( 'cpu', $result[0] );
        $this->assertArrayHasKey( 'disk_gb', $result[0] );
        $this->assertArrayHasKey( 'memory_mb', $result[0] );
        /*
        try {
            $method->invoke($ret, 'admin', $endpoint_info);
        }catch( Exception $e){
            $this->assertContains( 'ERROR', $e->getMessage() );
        }
        */

        // dummy data Endpoint
        $endpoint_info['endpoint']           = 'http://10.58.79.241:5000/v3';
        $endpoint_info['user_id']            = 'admin';
        $endpoint_info['user_password']      = 'admin';
        $endpoint_info['user_key']           = '565ace8b4cbe40a481658b031713be11';
        $endpoint_info['role_id']            = 'ed1e3ba27b394657b9fcf33ce232a45e';
        $endpoint_info['admin_tenant_id']    = '6219a6abf01144ab9004b7ca59322d06';
        $endpoint_info['admin_tenant_name']  = 'admin';

        try {
            $method->invoke($ret, 'test', $endpoint_info);
        }catch( Exception $e){
            $this->assertContains( 'ERROR', $e->getMessage() );
        }
    }

    /**
     * @covers neccsNal::_getThreshold
     * @todo   Implement testGetThreshold().
     */
    public function testGetThreshold(){

        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';
        $_SERVER['REQUEST_URI']    = "/test/resource/";

        $execList = array(
            'threshold_info' => array(
                '0' => array(
                     'nw_resource_kind' => 2,
                     'apl_type'         => 1,
                     'type'             => 1,
                     'device_type'      => 1,
                     'type_detail'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 10,
                ),
                '1' => array(
                    'nw_resource_kind' => 3,
                    'apl_type'         => 2,
                    'type'             => 1,
                    'device_type'      => 1,
                    'type_detail'      => '',
                    'redundant_configuration_flg' => 1,
                     'threshold' => 20,
                ),
                '2' => array(
                     'nw_resource_kind' => 1,
                     'apl_type'         => '',
                     'type'             => '',
                     'device_type'      => '',
                     'type_detail'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 30,
                ),
                '3' => array(
                     'nw_resource_kind' => 4,
                     'apl_type'         => '',
                     'type'             => '',
                     'device_type'      => '',
                     'type_detail'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 40,
                ),
                '4' => array(
                     'nw_resource_kind' => 5,
                     'apl_type'         => '',
                     'type'             => '',
                     'device_type'      => '',
                     'type_detail'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 50,
                ),
                '5' => array(
                     'nw_resource_kind' => 6,
                     'apl_type'         => '',
                     'type'             => '',
                     'device_type'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 60,
                ),
                '6' => array(
                     'nw_resource_kind' => 7,
                     'apl_type'         => '',
                     'type'             => '',
                     'device_type'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 70,
                ),
                '7' => array(
                     'nw_resource_kind' => 8,
                     'apl_type'         => '',
                     'type'             => '',
                     'device_type'      => '',
                     'redundant_configuration_flg' => '',
                     'threshold' => 80,
                ),
                '8' => array(
                     'nw_resource_kind' => 2,
                     'apl_type'         => 1,
                     'type'             => 3,
                     'device_type'      => 2,
                     'type_detail'      => 1,
                     'redundant_configuration_flg' => '',
                     'threshold' => 90,
                ),
                '10' => array(
                     'nw_resource_kind' => 2,
                     'apl_type'         => 1,
                     'type'             => 1,
                     'device_type'      => 3,
                     'type_detail'      => 3,
                     'redundant_configuration_flg' => '',
                     'threshold' => 100,
                ),
                '11' => array(
                    'nw_resource_kind' => 3,
                    'apl_type'         => 2,
                    'type'             => 1,
                    'device_type'      => 3,
                    'type_detail'      => '',
                    'redundant_configuration_flg' => '1',
                     'threshold' => 110,
                ),
            )
        );

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_getThreshold' );
        $method->setAccessible( true );


        // case 1
        $param = array(
             'nw_resource_kind' => 2,
             'function_type'    => 'license',
             'apl_type'         => 1,
             'type'             => 1,
             'device_type'      => 1,
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),10);

        // case 2
        $param = array(
             'nw_resource_kind' => 3,
             'function_type'    => 'pnf',
             'apl_type'         => 2,
             'type'             => 1,
             'device_type'      => 1,
             'type_detail'      => '',
             'redundant_configuration_flg' => 1,
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),20);

        // case 3
        $param = array(
             'nw_resource_kind' => 1,
             'function_type'    => 'globalip',
             'apl_type'         => '',
             'type'             => '',
             'device_type'      => '',
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),30);

        // case 4
        $param = array(
             'nw_resource_kind' => 4,
             'function_type'    => 'msa_vlan',
             'apl_type'         => '',
             'type'             => '',
             'device_type'      => '',
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),40);

        // case 5
        $param = array(
             'nw_resource_kind' => 5,
             'function_type'    => 'wan_vlan',
             'apl_type'         => '',
             'type'             => '',
             'device_type'      => '',
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),50);

        // case 6
        $param = array(
             'nw_resource_kind' => 2,
             'function_type'    => 'license',
             'type'             => 3,
             'device_type'      => 2,
             'type_detail'      => 1,
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),90);

        // case 7
        $param = array(
             'nw_resource_kind' => 2,
             'function_type'    => 'license',
             'apl_type'         => 1,
             'type'             => 1,
             'device_type'      => 3,
             'type_detail'      => 3,
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),100);

        // case 8
        $param = array(
             'nw_resource_kind' => 2,
             'function_type'    => 'license',
             'apl_type'         => 1,
             'type'             => 1,
             'device_type'      => 3,
             'type_detail'      => 7,
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),0);

        // case 9
        $param = array(
             'nw_resource_kind' => 3,
             'function_type'    => 'pnf',
             'apl_type'         => 2,
             'type'             => 1,
             'device_type'      => 1,
             'type_detail'      => '',
             'redundant_configuration_flg' => 0,
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),0);

        // case 10
        $param = array(
             'nw_resource_kind' => 3,
             'function_type'    => 'pnf',
             'apl_type'         => 2,
             'type'             => 1,
             'device_type'      => 3,
             'type_detail'      => '',
             'redundant_configuration_flg' => 0,
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),0);

        // case 11
        $param = array(
             'nw_resource_kind' => 6,
             'function_type'    => 'cpu_list',
             'apl_type'         => '',
             'type'             => '',
             'device_type'      => '',
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),60);

        // case 12
        $param = array(
             'nw_resource_kind' => 7,
             'function_type'    => 'memory_list',
             'apl_type'         => '',
             'type'             => '',
             'device_type'      => '',
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),70);

        // case 13
        $param = array(
             'nw_resource_kind' => 8,
             'function_type'    => 'storage_list',
             'apl_type'         => '',
             'type'             => '',
             'device_type'      => '',
             'type_detail'      => '',
             'redundant_configuration_flg' => '',
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),80);

        // case 14
        $param = array(
             'nw_resource_kind' => 3,
             'function_type'    => 'pnf',
             'apl_type'         => 2,
             'type'             => 1,
             'device_type'      => 3,
             'type_detail'      => '',
             'redundant_configuration_flg' => 0,
        );
        $this->assertEquals( $method->invoke($ret, $execList, $param),0);
    }

    /**
     * @covers neccsNal::_setUnitForMemory
     * @todo   Implement testSetUnitForMemory().
     */
    public function testSetUnitForMemory(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_setUnitForMemory' );
        $method->setAccessible( true );

        // case 1
        $this->assertEquals( $method->invoke($ret, 10),'10MB');

        // case 2
        $this->assertEquals( $method->invoke($ret, 0.01),'10KB');

        // case 3
        $this->assertEquals( $method->invoke($ret, 0.000001),'1B');

    }


    /**
     * @covers neccsNal::_setUnitForStorage
     * @todo   Implement testSetUnitForStorage().
     */
    public function testSetUnitForStorage(){

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'all_resource';

        $ret = new neccsNal();
        $method = new ReflectionMethod( $ret, '_setUnitForStorage' );
        $method->setAccessible( true );

        // case 1
        $this->assertEquals( $method->invoke($ret, 10),'10GB');

        // case 2
        $this->assertEquals( $method->invoke($ret, 0.01),'10MB');

        // case 3
        $this->assertEquals( $method->invoke($ret, 0.000001),'1KB');

        // case 3
        $this->assertEquals( $method->invoke($ret, 0.000000001),'1B');

    }
}
