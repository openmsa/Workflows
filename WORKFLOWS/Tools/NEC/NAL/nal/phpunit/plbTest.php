<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-15 at 12:32:36.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/plb.php';

class plbTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var plb
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers plb::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type']     = 'plb';
        $_GET['node_id']           = '123456789';
        $_GET['scenario']          = 'node';
        $_GET['ID']                = '133';

        $ret = new plb();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $stb = $this->getMock('plb',array('_execApiHttpMethod','_execApi', 'success'));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array( '0' => array( 'node_id' => '1234' ) )));
        $stb->expects($this->any())->method('_execApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

        // case 2
        $stb = $this->getMock('plb',array('_execApiHttpMethod','_execApi', 'success'));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array()));
        $stb->expects($this->any())->method('_execApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

        // case 3
        $stb = $this->getMock('plb',array('_execApiHttpMethod','_execApi', 'success'));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array( '0' => array( 'node_id' => '' ) )));
        $stb->expects($this->any())->method('_execApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     *  remove Dir
     */
    function removeDir( $dir ) {

        $cnt = 0;
        if(!is_dir($dir)){
            return;
        }
        $handle = opendir($dir);
        if (!$handle) {
            return ;
        }
        while (false !== ($item = readdir($handle))) {
            if ($item === "." || $item === "..") {
                continue;
            }
            $path = $dir . DIRECTORY_SEPARATOR . $item;
            if (is_dir($path)) {
                $cnt = $cnt + $this->removeDir($path);
            } else {
                chmod($path,0644);
                @unlink($path);
            }
        }
        closedir($handle);
        if (!@rmdir($dir)) {
            return ;
        }
    }

    /**
     *  After action
     */
    public function testAfterAction() {
        // after job
        $dir = neccsNal_Config::LOG_DIR . "/job";
        $this->removeDir($dir);
    }
}
