<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-02 at 11:49:12.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/appliances.php';

class appliancesTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var appliances
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

   /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers appliances::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=appliances&IaaS_tenant_id=IaaS_tenant_id_00001&apl_type=1&type=1&device_type=1';
        $_GET['function_type']               = 'appliances';
        $_GET['scenario']                    = 'resource';
        $_GET['IaaS_tenant_id']              = 'IaaS_tenant_id_00001';
        $_GET['apl_type']                    = '1';
        $_GET['type']                        = '1';
        $_GET['device_type']                 = '1';

        $ret = new appliances();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        // case 1
        $stb = $this->getMock('appliances',array('_execMultiApi', '_getContInfo', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_getContInfo')->will($this->returnValue(array()));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     * @covers appliances::_getContInfo
     * @todo   Implement testGetContInfo().
     */
    public function testGetContInfo()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=appliances&IaaS_tenant_id=IaaS_tenant_id_00001&apl_type=1&type=1&device_type=1';
        $_GET['function_type']               = 'appliances';
        $_GET['scenario']                    = 'resource';
        $_GET['IaaS_tenant_id']              = 'IaaS_tenant_id_00001';
        $_GET['apl_type']                    = '1';
        $_GET['type']                        = '1';
        $_GET['device_type']                 = '1';

        $ret = new appliances();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $apiResult = array(
          'appliances_info' => array(
            array(
              'ID' => '10001',
              'node_id' => 'node_id_00001',
              'node_name' => 'node_name_AAA',
              'device_user_name' => '',
              'task_status' => '1',
              'tenant_name' => 'tenant_name_AAA'
            ),
            array(
              'ID' => '10002',
              'node_id' => 'node_id_00002',
              'node_name' => 'node_name_BBB',
              'device_user_name' => '',
              'task_status' => '1',
              'tenant_name' => 'tenant_name_BBB'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'nw_resource_kind' => '2',
              'contract' => '3',
            )
          )
        );

        // case 1
        $result = $method->invoke($ret, $apiResult);
        $count = count( $result['contract_info'] );
        $this->assertEquals( $count, 4);

        // case 2
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=appliances&IaaS_tenant_id=IaaS_tenant_id_00001&apl_type=2&type=1&device_type=1&redundant_configuration_flg=1';
        $_GET['function_type']               = 'appliances';
        $_GET['scenario']                    = 'resource';
        $_GET['IaaS_tenant_id']              = 'IaaS_tenant_id_00001';
        $_GET['apl_type']                    = '2';
        $_GET['type']                        = '1';
        $_GET['device_type']                 = '1';
        $_GET['redundant_configuration_flg'] = '1';

        $ret = new appliances();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $apiResult = array(
          'appliances_info' => array(
            array(
              'ID' => '10001',
              'node_id' => 'node_id_00001',
              'node_name' => '',
              'device_user_name' => 'node_name_AAA',
              'task_status' => '9',
              'tenant_name' => 'tenant_name_AAA'
            ),
            array(
              'ID' => '10002',
              'node_id' => 'node_id_00002',
              'node_name' => '',
              'device_user_name' => 'node_name_BBB',
              'task_status' => '1',
              'tenant_name' => 'tenant_name_BBB'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'nw_resource_kind' => '2',
              'contract' => '3',
            )
          )
        );

        //case 2
        $result = $method->invoke($ret, $apiResult);
        $count = count( $result['contract_info'] );
        $this->assertEquals( $count, 4);

        // case 3
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=appliances&IaaS_tenant_id=IaaS_tenant_id_00001&apl_type=2&type=1&device_type=3';
        $_GET['function_type']  = 'appliances';
        $_GET['scenario']       = 'resource';
        $_GET['IaaS_tenant_id'] = 'IaaS_tenant_id_00001';
        $_GET['apl_type']       = '2';
        $_GET['type']           = '1';
        $_GET['device_type']    = '3';

        $ret = new appliances();
        $method = new ReflectionMethod( $ret, '_getContInfo' );
        $method->setAccessible( true );

        $apiResult = array(
          'appliances_info' => array(
            array(
              'ID' => '10001',
              'node_id' => 'node_id_00001',
              'node_name' => '',
              'device_user_name' => 'node_name_AAA',
              'task_status' => '1',
              'tenant_name' => 'tenant_name_AAA'
            ),
            array(
              'ID' => '10002',
              'node_id' => '',
              'node_name' => '',
              'device_user_name' => '',
              'task_status' => '',
              'tenant_name' => 'tenant_name_AAA'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'nw_resource_kind' => '2',
              'contract' => '3',
            )
          )
        );

        //case 3
        $result = $method->invoke($ret, $apiResult);
        $count = count( $result['contract_info'] );
        $this->assertEquals( $count, 4);

    }

}
