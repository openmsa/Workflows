<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-02 at 11:49:12.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/ext_globalip.php';

class ext_globalipTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ext_globalip
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

   /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ext_globalip::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=ext_globalip&IaaS_tenant_id=IaaS_tenant_id_00001';
        $_GET['function_type']    = 'ext_globalip';
        $_GET['scenario']         = 'resource';
        $_GET['IaaS_tenant_id']   = 'IaaS_tenant_id_00001';

        $ret = new ext_globalip();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $apiResult = array(
          'appliances_info' => array(
            array(
              'node_id' => 'node_id_00001',
              'node_name' => 'node_name_AAA',
              'device_user_name' => '',
              'apl_type' => '1'
            ),
            array(
              'node_id' => 'node_id_00002',
              'node_name' => '',
              'device_user_name' => 'node_name_BBB',
              'apl_type' => '2'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(
            array(
              'ID' => '10001',
              'global_ip' => '10.58.79.101',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => 101
            ),
            array(
              'ID' => '10002',
              'global_ip' => '10.58.79.102',
              'node_id' => '',
              'tenant_name' => '',
              'status' => 0
            ),
            array(
              'ID' => '10003',
              'global_ip' => '10.58.79.103',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_BBB',
              'status' => 201
            ),
            array(
              'ID' => '10004',
              'global_ip' => '10.58.79.104',
              'node_id' => 'node_id_00002',
              'tenant_name' => 'tenant_name_AAA',
              'status' => 101
            ),
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'contract_kind' => '1',
              'contract' => '3',
            )
          )
        );

        // case 1
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $apiResult = array(
          'appliances_info' => array(),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(
            array(
              'ID' => '10001',
              'global_ip' => '10.58.79.101',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '203'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'contract_kind' => '1',
              'contract' => '3',
            )
          )
        );

        //case 2
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $apiResult = array(
          'appliances_info' => array(
            array(
              'node_id' => 'node_id_00001',
              'node_name' => 'node_name_AAA',
              'device_user_name' => '',
              'apl_type' => '1'
            )
          ),
          'tenants_info' => array(),
          'global_ip_address_info' => array(
            array(
              'ID' => '10001',
              'global_ip' => '10.58.79.101',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '0'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            )
          )
        );

        //case 3
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $apiResult = array(
          'appliances_info' => array(
            array(
              'node_id' => 'node_id_00001',
              'node_name' => '',
              'device_user_name' => 'node_name_AAA',
              'apl_type' => '2'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'contract_kind' => '1',
              'contract' => '3',
            )
          )
        );

        //case 4
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     * @covers ext_globalip::put
     * @todo   Implement testPut().
     */
    public function testPut()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST['function_type']     = 'ext_globalip';
        $_POST['scenario']         = 'resource';

        $ret = new ext_globalip();
        $method = new ReflectionMethod( $ret, 'put' );
        $method->setAccessible( true );

        // case 1
        try {
            $method->invoke($ret);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'IaaS_tenant_id is not set.');
        }

        $ret->_p['IaaS_tenant_id'] = '1234';

        // case 2
        try {
            $method->invoke($ret);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'global_ip is not set.');
        }

        // case 3
        $stb = $this->getMock('ext_globalip',array('_getTenant'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnArgument(''));
        $stb->_p['IaaS_tenant_id'] = '1234';
        $stb->_p['global_ip'] = '168.198.4.1';
        try {
            $method->invoke($stb);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'Failed to convert the tenant ID.');
        }

        // case 4
        $stb = $this->getMock('ext_globalip',array('_getTenant', '_execApiHttpMethod'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnArgument(''));
        $stb->_p['IaaS_tenant_id'] = '1234';
        $stb->_p['global_ip'] = '168.198.4.1';
        try {
            $method->invoke($stb);
        }catch( Exception $e){
            $this->assertEquals($e->getMessage(),'global ip not exists. (168.198.4.1)');
        }

        // case 5
        $stb = $this->getMock('ext_globalip',array('_getTenant', '_execApiHttpMethod', '_execApi', 'success'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array('0' => array( 'ID' => '1234' ))));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(0));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $stb->_p['IaaS_tenant_id'] = '1234';
        $stb->_p['global_ip'] = '168.198.4.1';
        $stb->_p['status'] = '0';
        $this->assertEquals( $method->invoke($stb),'');

        // case 6
        $stb = $this->getMock('ext_globalip',array('_getTenant', '_execApiHttpMethod', '_execApi', 'success'));
        $stb->expects($this->any())->method('_getTenant')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('_execApiHttpMethod')->will($this->returnValue(array('0' => array( 'ID' => '1234' ))));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue(0));
        $stb->expects($this->any())->method('success')->will($this->returnArgument(0));
        $stb->_p['IaaS_tenant_id'] = '1234';
        $stb->_p['global_ip'] = '168.198.4.1';
        $stb->_p['status'] = '0';
        $stb->_p['node_id'] = '1234';
        $this->assertEquals( $method->invoke($stb),'');

    }
    /**
     * @covers ext_globalip::_getContInfo
     * @todo   Implement testGetContInfo().
     */
    public function testGetContInfo()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = '/Nal/resource/?function_type=ext_globalip&IaaS_tenant_id=IaaS_tenant_id_00001';
        $_GET['function_type']    = 'ext_globalip';
        $_GET['scenario']         = 'resource';
        $_GET['IaaS_tenant_id']   = 'IaaS_tenant_id_00001';

        $ret = new ext_globalip();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $apiResult = array(
          'appliances_info' => array(
            array(
              'node_id' => 'node_id_00001',
              'node_name' => 'node_name_AAA',
              'device_user_name' => '',
              'apl_type' => '1'
            ),
            array(
              'node_id' => 'node_id_00002',
              'node_name' => '',
              'device_user_name' => 'node_name_BBB',
              'apl_type' => '2'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(
            array(
              'ID' => '10001',
              'global_ip' => '10.58.79.101',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '101'
            ),
            array(
              'ID' => '10002',
              'global_ip' => '10.58.79.102',
              'node_id' => '',
              'tenant_name' => '',
              'status' => '0'
            ),
            array(
              'ID' => '10003',
              'global_ip' => '10.58.79.103',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_BBB',
              'status' => '201'
            ),
            array(
              'ID' => '10004',
              'global_ip' => '10.58.79.104',
              'node_id' => 'node_id_00002',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '101'
            ),
            array(
              'ID' => '10005',
              'global_ip' => '10.58.79.105',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '201'
            ),
            array(
              'ID' => '10006',
              'global_ip' => '10.58.79.106',
              'node_id' => 'node_id_00003',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '202'
            ),
            array(
              'ID' => '10007',
              'global_ip' => '10.58.79.107',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_CCC',
              'status' => '202'
            ),
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'contract_kind' => '1',
              'contract' => '3',
            )
          )
        );

        // case 1
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $apiResult = array(
          'appliances_info' => array(),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(
            array(
              'ID' => '10001',
              'global_ip' => '10.58.79.101',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '203'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'contract_kind' => '1',
              'contract' => '3',
            )
          )
        );

        //case 2
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $apiResult = array(
          'appliances_info' => array(
            array(
              'node_id' => 'node_id_00001',
              'node_name' => 'node_name_AAA',
              'device_user_name' => '',
              'apl_type' => '1'
            )
          ),
          'tenants_info' => array(),
          'global_ip_address_info' => array(
            array(
              'ID' => '10001',
              'global_ip' => '10.58.79.101',
              'node_id' => 'node_id_00001',
              'tenant_name' => 'tenant_name_AAA',
              'status' => '0'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            )
          )
        );

        //case 3
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $apiResult = array(
          'appliances_info' => array(
            array(
              'node_id' => 'node_id_00001',
              'node_name' => '',
              'device_user_name' => 'node_name_AAA',
              'apl_type' => '2'
            )
          ),
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'global_ip_address_info' => array(),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'contract_kind' => '1',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'contract_kind' => '1',
              'contract' => '3',
            )
          )
        );

        //case 4
        $stb = $this->getMock('ext_globalip',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($apiResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

    }

}
