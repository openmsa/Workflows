<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-02 at 10:29:36.
 */

require_once dirname(__FILE__) . '/../Nal/api/app/service.php';

class serviceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if( !defined('PHPUNIT_RUN')) {
            define( 'PHPUNIT_RUN', 1 );
        }
        $this->homeDir = realpath( dirname(__FILE__) ) ;
        if( !defined('HOME_DIR')) {
            define( 'HOME_DIR', $this->homeDir );
        }
        if( !defined('API_DIR')) {
            define( 'API_DIR' , HOME_DIR . '' );
        }
        if( !defined('APP_DIR')) {
            define( 'APP_DIR' , API_DIR . '/Stub' );
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers service::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = '/Nal/resource/?function_type=service&IaaS_tenant_id=IaaS_tenant_id_00001&device_type=1';
        $_GET['function_type']     = 'service';
        $_GET['scenario']          = 'resource';
        $_GET['IaaS_tenant_id']    = 'IaaS_tenant_id_00001';
        $_GET['device_type']       = '2';

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $nalResult = array(
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'nw_resource_kind' => '2',
              'contract' => '3',
            )
          )
        );

        $wimResult = array(
          'result' => array(
            'status' => 'success'
          ),
          'data' => array(
            'dc_group_info' => array(
              array(
                'ID' => '10001',
                'group_id' => 'group_id_00001',
                'group_type' => '2',
                'group_name' => 'group_name_AAA',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              ),
              array(
                'ID' => '10002',
                'group_id' => 'group_id_00002',
                'group_type' => '2',
                'group_name' => 'group_name_BBB',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              ),
              array(
                'ID' => '10003',
                'group_id' => 'group_id_00003',
                'group_type' => '2',
                'group_name' => 'group_name_CCC',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_BBB'
              )
            )
          )
        );

        //case 1
        $stb = $this->getMock('service',array('_execMultiApi', '_execApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($nalResult));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $nalResult = array(
          'tenants_info' => array(),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            )
          )
        );

        $wimResult = array(
          'result' => array(
            'status' => 'success'
          ),
          'data' => array(
            'dc_group_info' => array(
              array(
                'ID' => '10001',
                'group_id' => 'group_id_00001',
                'group_type' => '2',
                'group_name' => 'group_name_AAA',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              ),
              array(
                'ID' => '10002',
                'group_id' => 'group_id_00002',
                'group_type' => '2',
                'group_name' => 'group_name_BBB',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              )
            )
          )
        );

        //case 2
        $stb = $this->getMock('service',array('_execMultiApi', '_execApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($nalResult));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $nalResult = array(
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            )
          )
        );

        $wimResult = array(
          'result' => array(
            'status' => 'success'
          ),
          'data' => array(
            'dc_group_info' => array()
          )
        );

        //case 3
        $stb = $this->getMock('service',array('_execMultiApi', '_execApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($nalResult));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        //case 4
        $stb = $this->getMock('service',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     * @covers service::_getContInfo
     * @todo   Implement testGetContInfo().
     */
    public function testGetContInfo()
    {
        // case 1
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI']    = '/Nal/resource/?function_type=service&IaaS_tenant_id=IaaS_tenant_id_00001&device_type=1';
        $_GET['function_type']     = 'service';
        $_GET['scenario']          = 'resource';
        $_GET['IaaS_tenant_id']    = 'IaaS_tenant_id_00001';
        $_GET['device_type']       = '2';

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $nalResult = array(
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10003',
              'tenant_name' => 'tenant_name_BBB',
              'nw_resource_kind' => '2',
              'contract' => '3',
            )
          )
        );

        $wimResult = array(
          'result' => array(
            'status' => 'success'
          ),
          'data' => array(
            'dc_group_info' => array(
              array(
                'ID' => '10001',
                'group_id' => 'group_id_00001',
                'group_type' => '2',
                'group_name' => 'group_name_AAA',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              ),
              array(
                'ID' => '10002',
                'group_id' => 'group_id_00002',
                'group_type' => '2',
                'group_name' => 'group_name_BBB',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              ),
              array(
                'ID' => '10003',
                'group_id' => 'group_id_00003',
                'group_type' => '2',
                'group_name' => 'group_name_CCC',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_BBB'
              )
            )
          )
        );

        //case 1
        $stb = $this->getMock('service',array('_execMultiApi', '_execApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($nalResult));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $nalResult = array(
          'tenants_info' => array(),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            )
          )
        );

        $wimResult = array(
          'result' => array(
            'status' => 'success'
          ),
          'data' => array(
            'dc_group_info' => array(
              array(
                'ID' => '10001',
                'group_id' => 'group_id_00001',
                'group_type' => '2',
                'group_name' => 'group_name_AAA',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              ),
              array(
                'ID' => '10002',
                'group_id' => 'group_id_00002',
                'group_type' => '2',
                'group_name' => 'group_name_BBB',
                'task_status' => '1',
                'tenant_name' => 'tenant_name_AAA'
              )
            )
          )
        );

        //case 2
        $stb = $this->getMock('service',array('_execMultiApi', '_execApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($nalResult));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        $nalResult = array(
          'tenants_info' => array(
            array(
              'tenant_name' => 'tenant_name_AAA',
              'IaaS_tenant_id' => 'IaaS_tenant_id_00001'
            )
          ),
          'tenant_contract_info' => array(
            array(
              'ID' => '10001',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            ),
            array(
              'ID' => '10002',
              'tenant_name' => 'tenant_name_AAA',
              'nw_resource_kind' => '2',
              'contract' => '2',
            )
          )
        );

        $wimResult = array(
          'result' => array(
            'status' => 'success'
          ),
          'data' => array(
            'dc_group_info' => array()
          )
        );

        //case 3
        $stb = $this->getMock('service',array('_execMultiApi', '_execApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnValue($nalResult));
        $stb->expects($this->any())->method('_execApi')->will($this->returnValue($wimResult));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $this->assertEquals( $method->invoke($stb),'');

        $ret = new service();
        $method = new ReflectionMethod( $ret, 'get' );
        $method->setAccessible( true );

        //case 4
        $stb = $this->getMock('service',array('_execMultiApi', 'success'));
        $stb->expects($this->any())->method('_execMultiApi')->will($this->returnArgument(0));
        $stb->expects($this->any())->method('success')->will($this->returnValue(0));
        $stb->_nalConf['api_type'] = 'wim'; // Wim
        $this->assertEquals( $method->invoke($stb),'');

    }

    /**
     * @covers service::_execResult
     * @todo   Implement testExecResult().
     */
    public function testExecResult()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_GET['function_type'] = 'resource';
        $_SERVER['REQUEST_URI'] = "/Nal/node/";
        $ret = new service();
        $method = new ReflectionMethod($ret, '_execResult');
        $method->setAccessible(true);

        $url = 'http://127.0.0.1/Nal/';

        // case 1
        $err = array();
        $this->assertEquals($method->invoke($ret,$err,$url),'');

        // case 2
        $err['result'] = array( 'error-code' => 'NAL100000', 'message' => '' );
        try{
            $method->invoke($ret,$err,$url);
        }catch(Exception $e){
            $this->assertEquals('',$e->getMessage());
        }

        // case 3
        $err['result'] = array( 'error-code' => 'NAL140001', 'message' => 'test' );
        try{
            $method->invoke($ret,$err,$url);
        }catch(Exception $e){
            $this->assertEquals('test',$e->getMessage());
        }
    }

}
